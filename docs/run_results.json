{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.9", "generated_at": "2024-08-13T16:33:46.822892Z", "invocation_id": "c56032e6-690f-4ae2-953d-42a6d44a62f2", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:26.970928Z", "completed_at": "2024-08-13T16:33:27.462666Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:27.463721Z", "completed_at": "2024-08-13T16:33:27.463742Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.5190300941467285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__balance_transaction_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`balance_transaction`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__balance_transaction_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:26.974201Z", "completed_at": "2024-08-13T16:33:27.518886Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:27.524825Z", "completed_at": "2024-08-13T16:33:27.524872Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.5818099975585938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__charge_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`charge`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__charge_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:26.948685Z", "completed_at": "2024-08-13T16:33:27.519325Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:27.525896Z", "completed_at": "2024-08-13T16:33:27.525905Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.5926611423492432, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__account_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`account`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__account_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:26.973347Z", "completed_at": "2024-08-13T16:33:27.799279Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:27.800829Z", "completed_at": "2024-08-13T16:33:27.800899Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.8562440872192383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__card_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`card`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__card_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:27.543675Z", "completed_at": "2024-08-13T16:33:28.277570Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:28.386605Z", "completed_at": "2024-08-13T16:33:28.386660Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.846811056137085, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__discount_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`discount`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__discount_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:27.547082Z", "completed_at": "2024-08-13T16:33:28.278497Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:28.390065Z", "completed_at": "2024-08-13T16:33:28.390070Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.8485429286956787, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__dispute_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`dispute`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__dispute_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:27.467694Z", "completed_at": "2024-08-13T16:33:28.389348Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:28.391377Z", "completed_at": "2024-08-13T16:33:28.391384Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.9261159896850586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__customer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`customer`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__customer_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:27.807158Z", "completed_at": "2024-08-13T16:33:28.688760Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:28.689745Z", "completed_at": "2024-08-13T16:33:28.689760Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.8857707977294922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__fee_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`fee`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__fee_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:28.393191Z", "completed_at": "2024-08-13T16:33:28.768879Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:28.769409Z", "completed_at": "2024-08-13T16:33:28.769415Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.37936997413635254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__invoice_line_item_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`invoice_line_item`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice_line_item_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:28.399317Z", "completed_at": "2024-08-13T16:33:28.786693Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:28.787585Z", "completed_at": "2024-08-13T16:33:28.787593Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.39194488525390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__invoice_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`invoice`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:28.406200Z", "completed_at": "2024-08-13T16:33:28.786919Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:28.787950Z", "completed_at": "2024-08-13T16:33:28.787964Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3904118537902832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_intent_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`payment_intent`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_intent_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:28.695487Z", "completed_at": "2024-08-13T16:33:29.014444Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:29.015451Z", "completed_at": "2024-08-13T16:33:29.015493Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3230149745941162, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_method_card_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`payment_method_card`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_method_card_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:28.778474Z", "completed_at": "2024-08-13T16:33:29.129235Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:29.129891Z", "completed_at": "2024-08-13T16:33:29.129901Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.36013293266296387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_method_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`payment_method`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_method_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:28.790942Z", "completed_at": "2024-08-13T16:33:29.174547Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:29.175079Z", "completed_at": "2024-08-13T16:33:29.175089Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.38579797744750977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payout_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`payout`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payout_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:29.017900Z", "completed_at": "2024-08-13T16:33:29.384565Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:29.385248Z", "completed_at": "2024-08-13T16:33:29.385255Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3685441017150879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__product_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`product`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__product_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:29.131777Z", "completed_at": "2024-08-13T16:33:29.490994Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:29.491785Z", "completed_at": "2024-08-13T16:33:29.491796Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3611948490142822, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__refund_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`refund`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__refund_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:29.387209Z", "completed_at": "2024-08-13T16:33:29.728008Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:29.730164Z", "completed_at": "2024-08-13T16:33:29.730183Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.34507203102111816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__transfer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`transfer`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__transfer_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:29.493804Z", "completed_at": "2024-08-13T16:33:29.907661Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:29.908456Z", "completed_at": "2024-08-13T16:33:29.908468Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.415985107421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__balance_transaction", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__balance_transaction_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    available_on\n    \n as \n    \n    available_on\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    fee\n    \n as \n    \n    fee\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    net\n    \n as \n    \n    net\n    \n, \n    \n    \n    payout_id\n    \n as \n    \n    payout_id\n    \n, \n    \n    \n    reporting_category\n    \n as \n    \n    reporting_category\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as balance_transaction_id,\n        amount,\n        cast(available_on as timestamp) as available_on,\n        cast(created as timestamp) as created_at,\n        connected_account_id,\n        currency,\n        description,\n        exchange_rate,\n        fee,\n        net,\n        reporting_category,\n        source,\n        status,\n        type,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__balance_transaction`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:29.734596Z", "completed_at": "2024-08-13T16:33:30.123584Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:30.124643Z", "completed_at": "2024-08-13T16:33:30.124651Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.39201784133911133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__account", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__account_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    business_profile_name\n    \n as \n    \n    business_profile_name\n    \n, \n    \n    \n    business_profile_mcc\n    \n as \n    \n    business_profile_mcc\n    \n, \n    \n    \n    business_type\n    \n as \n    \n    business_type\n    \n, \n    \n    \n    charges_enabled\n    \n as \n    \n    charges_enabled\n    \n, \n    \n    \n    company_address_city\n    \n as \n    \n    company_address_city\n    \n, \n    \n    \n    company_address_country\n    \n as \n    \n    company_address_country\n    \n, \n    \n    \n    company_address_line_1\n    \n as \n    \n    company_address_line_1\n    \n, \n    \n    \n    company_address_line_2\n    \n as \n    \n    company_address_line_2\n    \n, \n    \n    \n    company_address_postal_code\n    \n as \n    \n    company_address_postal_code\n    \n, \n    \n    \n    company_address_state\n    \n as \n    \n    company_address_state\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    company_phone\n    \n as \n    \n    company_phone\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    default_currency\n    \n as \n    \n    default_currency\n    \n, \n    \n    \n    details_submitted\n    \n as \n    \n    details_submitted\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    payouts_enabled\n    \n as \n    \n    payouts_enabled\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as account_id,\n        business_profile_mcc,\n        business_profile_name,\n        business_type,\n        charges_enabled,\n        company_address_city,\n        company_address_country,\n        company_address_line_1,\n        company_address_line_2,\n        company_address_postal_code,\n        company_address_state,\n        company_name,\n        company_phone,\n        country,\n        cast(created as timestamp) as created_at,\n        default_currency,\n        email,\n        is_deleted,\n        metadata,\n        payouts_enabled as is_payouts_enabled,\n        type as account_type,\n        source_relation\n\n        \n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__account`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:29.910438Z", "completed_at": "2024-08-13T16:33:30.324655Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:30.325151Z", "completed_at": "2024-08-13T16:33:30.325157Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.41571998596191406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__charge", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__charge_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_refunded\n    \n as \n    \n    amount_refunded\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    application_fee_amount\n    \n as \n    \n    application_fee_amount\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    bank_account_id\n    \n as \n    \n    bank_account_id\n    \n, \n    \n    \n    calculated_statement_descriptor\n    \n as \n    \n    calculated_statement_descriptor\n    \n, \n    \n    \n    captured\n    \n as \n    \n    captured\n    \n, \n    \n    \n    card_id\n    \n as \n    \n    card_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    destination\n    \n as \n    \n    destination\n    \n, \n    \n    \n    failure_code\n    \n as \n    \n    failure_code\n    \n, \n    \n    \n    failure_message\n    \n as \n    \n    failure_message\n    \n, \n    \n    \n    fraud_details_stripe_report\n    \n as \n    \n    fraud_details_stripe_report\n    \n, \n    \n    \n    fraud_details_user_report\n    \n as \n    \n    fraud_details_user_report\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    on_behalf_of\n    \n as \n    \n    on_behalf_of\n    \n, \n    \n    \n    outcome_network_status\n    \n as \n    \n    outcome_network_status\n    \n, \n    \n    \n    outcome_reason\n    \n as \n    \n    outcome_reason\n    \n, \n    \n    \n    outcome_risk_level\n    \n as \n    \n    outcome_risk_level\n    \n, \n    \n    \n    outcome_risk_score\n    \n as \n    \n    outcome_risk_score\n    \n, \n    \n    \n    outcome_seller_message\n    \n as \n    \n    outcome_seller_message\n    \n, \n    \n    \n    outcome_type\n    \n as \n    \n    outcome_type\n    \n, \n    \n    \n    paid\n    \n as \n    \n    paid\n    \n, \n    \n    \n    payment_intent_id\n    \n as \n    \n    payment_intent_id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    receipt_email\n    \n as \n    \n    receipt_email\n    \n, \n    \n    \n    receipt_number\n    \n as \n    \n    receipt_number\n    \n, \n    \n    \n    receipt_url\n    \n as \n    \n    receipt_url\n    \n, \n    \n    \n    refunded\n    \n as \n    \n    refunded\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_line_1\n    \n as \n    \n    shipping_address_line_1\n    \n, \n    \n    \n    shipping_address_line_2\n    \n as \n    \n    shipping_address_line_2\n    \n, \n    \n    \n    shipping_address_postal_code\n    \n as \n    \n    shipping_address_postal_code\n    \n, \n    \n    \n    shipping_address_state\n    \n as \n    \n    shipping_address_state\n    \n, \n    \n    \n    shipping_carrier\n    \n as \n    \n    shipping_carrier\n    \n, \n    \n    \n    shipping_name\n    \n as \n    \n    shipping_name\n    \n, \n    \n    \n    shipping_phone\n    \n as \n    \n    shipping_phone\n    \n, \n    \n    \n    shipping_tracking_number\n    \n as \n    \n    shipping_tracking_number\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    source_transfer\n    \n as \n    \n    source_transfer\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    transfer_data_destination\n    \n as \n    \n    transfer_data_destination\n    \n, \n    \n    \n    transfer_group\n    \n as \n    \n    transfer_group\n    \n, \n    \n    \n    transfer_id\n    \n as \n    \n    transfer_id\n    \n, \n    \n    \n    billing_detail_address_city\n    \n as \n    \n    billing_detail_address_city\n    \n, \n    \n    \n    billing_detail_address_country\n    \n as \n    \n    billing_detail_address_country\n    \n, \n    cast(null as string) as \n    \n    billing_detail_address_line1\n    \n , \n    cast(null as string) as \n    \n    billing_detail_address_line2\n    \n , \n    \n    \n    billing_detail_address_postal_code\n    \n as \n    \n    billing_detail_address_postal_code\n    \n, \n    \n    \n    billing_detail_address_state\n    \n as \n    \n    billing_detail_address_state\n    \n, \n    \n    \n    billing_detail_email\n    \n as \n    \n    billing_detail_email\n    \n, \n    \n    \n    billing_detail_name\n    \n as \n    \n    billing_detail_name\n    \n, \n    \n    \n    billing_detail_phone\n    \n as \n    \n    billing_detail_phone\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select \n        id as charge_id, \n        amount,\n        amount_refunded,\n        application_fee_amount,\n        balance_transaction_id,\n        captured as is_captured,\n        card_id,\n        cast(created as timestamp) as created_at,\n        connected_account_id,\n        customer_id,\n        currency,\n        description,\n        failure_code,\n        failure_message,\n        metadata,\n        paid as is_paid,\n        payment_intent_id,\n        payment_method_id,\n        receipt_email,\n        receipt_number,\n        refunded as is_refunded,\n        status,\n        shipping_address_city,\n        shipping_address_country,\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_postal_code,\n        shipping_address_state,\n        shipping_carrier,\n        shipping_name,\n        shipping_phone,\n        shipping_tracking_number,\n        source_id,\n        source_transfer,\n        statement_descriptor,\n        invoice_id,\n        calculated_statement_descriptor,\n        billing_detail_address_city,\n        billing_detail_address_country,\n        billing_detail_address_line1,\n        billing_detail_address_line2,\n        billing_detail_address_postal_code,\n        billing_detail_address_state,\n        billing_detail_email,\n        billing_detail_name,\n        billing_detail_phone,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__charge`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:30.126346Z", "completed_at": "2024-08-13T16:33:30.532923Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:30.533368Z", "completed_at": "2024-08-13T16:33:30.533374Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.408038854598999, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__card", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__card_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    address_city\n    \n as \n    \n    address_city\n    \n, \n    \n    \n    address_country\n    \n as \n    \n    address_country\n    \n, \n    \n    \n    address_line_1\n    \n as \n    \n    address_line_1\n    \n, \n    \n    \n    address_line_1_check\n    \n as \n    \n    address_line_1_check\n    \n, \n    \n    \n    address_line_2\n    \n as \n    \n    address_line_2\n    \n, \n    \n    \n    address_state\n    \n as \n    \n    address_state\n    \n, \n    \n    \n    address_zip\n    \n as \n    \n    address_zip\n    \n, \n    \n    \n    address_zip_check\n    \n as \n    \n    address_zip_check\n    \n, \n    \n    \n    brand\n    \n as \n    \n    brand\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    cvc_check\n    \n as \n    \n    cvc_check\n    \n, \n    \n    \n    dynamic_last_4\n    \n as \n    \n    dynamic_last_4\n    \n, \n    \n    \n    exp_month\n    \n as \n    \n    exp_month\n    \n, \n    \n    \n    exp_year\n    \n as \n    \n    exp_year\n    \n, \n    \n    \n    fingerprint\n    \n as \n    \n    fingerprint\n    \n, \n    \n    \n    funding\n    \n as \n    \n    funding\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    last_4\n    \n as \n    \n    last_4\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    network\n    \n as \n    \n    network\n    \n, \n    \n    \n    recipient\n    \n as \n    \n    recipient\n    \n, \n    \n    \n    tokenization_method\n    \n as \n    \n    tokenization_method\n    \n, \n    \n    \n    wallet_type\n    \n as \n    \n    wallet_type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as card_id,\n        account_id,\n        address_city as card_address_city,\n        address_country as card_address_country,\n        address_line_1 as card_address_line_1,\n        address_line_2 as card_address_line_2,\n        address_state as card_address_state,\n        address_zip as card_address_postal_code,\n        wallet_type,\n        brand,\n        country,\n        cast(created as timestamp) as created_at,\n        customer_id,\n        name as card_name,\n        recipient,\n        funding,\n        source_relation\n        \n        \n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__card`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:30.326590Z", "completed_at": "2024-08-13T16:33:30.728641Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:30.729090Z", "completed_at": "2024-08-13T16:33:30.729095Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4035167694091797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__discount", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__discount_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    type_id\n    \n as \n    \n    type_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    checkout_session_id\n    \n as \n    \n    checkout_session_id\n    \n, \n    \n    \n    checkout_session_line_item_id\n    \n as \n    \n    checkout_session_line_item_id\n    \n, \n    \n    \n    coupon_id\n    \n as \n    \n    coupon_id\n    \n, \n    \n    \n    credit_note_line_item_id\n    \n as \n    \n    credit_note_line_item_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_item_id\n    \n as \n    \n    invoice_item_id\n    \n, \n    \n    \n    promotion_code\n    \n as \n    \n    promotion_code\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n        \n            \n            `end`\n            \n        \n    \n as end_at , \n    \n    \n        \n            \n            `start`\n            \n        \n    \n as start_at \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as discount_id,\n        type,\n        type_id,\n        amount,\n        checkout_session_id,\n        checkout_session_line_item_id,\n        coupon_id,\n        credit_note_line_item_id,\n        customer_id,\n        cast(end_at as timestamp) as end_at, -- renamed in macro get_discount_columns, source column name: end\n        invoice_id,\n        invoice_item_id,\n        promotion_code,\n        cast(start_at as timestamp) as start_at, -- renamed in macro get_discount_columns, source column name: start\n        subscription_id,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__discount`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:30.534882Z", "completed_at": "2024-08-13T16:33:30.904547Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:30.905047Z", "completed_at": "2024-08-13T16:33:30.905053Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.37120771408081055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__dispute", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__dispute_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    balance_transaction\n    \n as \n    \n    balance_transaction\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    evidence_access_activity_log\n    \n as \n    \n    evidence_access_activity_log\n    \n, \n    \n    \n    evidence_billing_address\n    \n as \n    \n    evidence_billing_address\n    \n, \n    \n    \n    evidence_cancellation_policy\n    \n as \n    \n    evidence_cancellation_policy\n    \n, \n    \n    \n    evidence_cancellation_policy_disclosure\n    \n as \n    \n    evidence_cancellation_policy_disclosure\n    \n, \n    \n    \n    evidence_cancellation_rebuttal\n    \n as \n    \n    evidence_cancellation_rebuttal\n    \n, \n    \n    \n    evidence_customer_communication\n    \n as \n    \n    evidence_customer_communication\n    \n, \n    \n    \n    evidence_customer_email_address\n    \n as \n    \n    evidence_customer_email_address\n    \n, \n    \n    \n    evidence_customer_name\n    \n as \n    \n    evidence_customer_name\n    \n, \n    \n    \n    evidence_customer_purchase_ip\n    \n as \n    \n    evidence_customer_purchase_ip\n    \n, \n    \n    \n    evidence_customer_signature\n    \n as \n    \n    evidence_customer_signature\n    \n, \n    \n    \n    evidence_details_due_by\n    \n as \n    \n    evidence_details_due_by\n    \n, \n    \n    \n    evidence_details_has_evidence\n    \n as \n    \n    evidence_details_has_evidence\n    \n, \n    \n    \n    evidence_details_past_due\n    \n as \n    \n    evidence_details_past_due\n    \n, \n    \n    \n    evidence_details_submission_count\n    \n as \n    \n    evidence_details_submission_count\n    \n, \n    \n    \n    evidence_duplicate_charge_documentation\n    \n as \n    \n    evidence_duplicate_charge_documentation\n    \n, \n    \n    \n    evidence_duplicate_charge_explanation\n    \n as \n    \n    evidence_duplicate_charge_explanation\n    \n, \n    \n    \n    evidence_duplicate_charge_id\n    \n as \n    \n    evidence_duplicate_charge_id\n    \n, \n    \n    \n    evidence_product_description\n    \n as \n    \n    evidence_product_description\n    \n, \n    \n    \n    evidence_receipt\n    \n as \n    \n    evidence_receipt\n    \n, \n    \n    \n    evidence_refund_policy\n    \n as \n    \n    evidence_refund_policy\n    \n, \n    \n    \n    evidence_refund_policy_disclosure\n    \n as \n    \n    evidence_refund_policy_disclosure\n    \n, \n    \n    \n    evidence_refund_refusal_explanation\n    \n as \n    \n    evidence_refund_refusal_explanation\n    \n, \n    \n    \n    evidence_service_date\n    \n as \n    \n    evidence_service_date\n    \n, \n    \n    \n    evidence_service_documentation\n    \n as \n    \n    evidence_service_documentation\n    \n, \n    \n    \n    evidence_shipping_address\n    \n as \n    \n    evidence_shipping_address\n    \n, \n    \n    \n    evidence_shipping_carrier\n    \n as \n    \n    evidence_shipping_carrier\n    \n, \n    \n    \n    evidence_shipping_date\n    \n as \n    \n    evidence_shipping_date\n    \n, \n    \n    \n    evidence_shipping_documentation\n    \n as \n    \n    evidence_shipping_documentation\n    \n, \n    \n    \n    evidence_shipping_tracking_number\n    \n as \n    \n    evidence_shipping_tracking_number\n    \n, \n    \n    \n    evidence_uncategorized_file\n    \n as \n    \n    evidence_uncategorized_file\n    \n, \n    \n    \n    evidence_uncategorized_text\n    \n as \n    \n    evidence_uncategorized_text\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_charge_refundable\n    \n as \n    \n    is_charge_refundable\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as dispute_id,\n        amount as dispute_amount,\n        balance_transaction,\n        charge_id,\n        connected_account_id,\n        cast(created as timestamp) as dispute_created_at,\n        currency as dispute_currency,\n        evidence_access_activity_log,\n        evidence_billing_address,\n        evidence_cancellation_policy,\n        evidence_cancellation_policy_disclosure,\n        evidence_cancellation_rebuttal,\n        evidence_customer_communication,\n        evidence_customer_email_address,\n        evidence_customer_name,\n        evidence_customer_purchase_ip,\n        evidence_customer_signature,\n        evidence_details_due_by,\n        evidence_details_has_evidence,\n        evidence_details_past_due,\n        evidence_details_submission_count,\n        evidence_duplicate_charge_documentation,\n        evidence_duplicate_charge_explanation,\n        evidence_duplicate_charge_id,\n        evidence_product_description,\n        evidence_receipt,\n        evidence_refund_policy,\n        evidence_refund_policy_disclosure,\n        evidence_refund_refusal_explanation,\n        evidence_service_date,\n        evidence_service_documentation,\n        evidence_shipping_address,\n        evidence_shipping_carrier,\n        evidence_shipping_date,\n        evidence_shipping_documentation,\n        evidence_shipping_tracking_number,\n        evidence_uncategorized_file,\n        evidence_uncategorized_text,\n        is_charge_refundable,\n        metadata as dispute_metadata,\n        reason as dispute_reason,\n        status as dispute_status,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__dispute`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:30.730871Z", "completed_at": "2024-08-13T16:33:31.128242Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:31.128664Z", "completed_at": "2024-08-13T16:33:31.128669Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3988208770751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__customer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__customer_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_balance\n    \n as \n    \n    account_balance\n    \n, \n    \n    \n    address_city\n    \n as \n    \n    address_city\n    \n, \n    \n    \n    address_country\n    \n as \n    \n    address_country\n    \n, \n    \n    \n    address_line_1\n    \n as \n    \n    address_line_1\n    \n, \n    \n    \n    address_line_2\n    \n as \n    \n    address_line_2\n    \n, \n    \n    \n    address_postal_code\n    \n as \n    \n    address_postal_code\n    \n, \n    \n    \n    address_state\n    \n as \n    \n    address_state\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bank_account_id\n    \n as \n    \n    bank_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    default_card_id\n    \n as \n    \n    default_card_id\n    \n, \n    \n    \n    delinquent\n    \n as \n    \n    delinquent\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_prefix\n    \n as \n    \n    invoice_prefix\n    \n, \n    \n    \n    invoice_settings_default_payment_method\n    \n as \n    \n    invoice_settings_default_payment_method\n    \n, \n    \n    \n    invoice_settings_footer\n    \n as \n    \n    invoice_settings_footer\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_line_1\n    \n as \n    \n    shipping_address_line_1\n    \n, \n    \n    \n    shipping_address_line_2\n    \n as \n    \n    shipping_address_line_2\n    \n, \n    \n    \n    shipping_address_postal_code\n    \n as \n    \n    shipping_address_postal_code\n    \n, \n    \n    \n    shipping_address_state\n    \n as \n    \n    shipping_address_state\n    \n, \n    \n    \n    shipping_carrier\n    \n as \n    \n    shipping_carrier\n    \n, \n    \n    \n    shipping_name\n    \n as \n    \n    shipping_name\n    \n, \n    \n    \n    shipping_phone\n    \n as \n    \n    shipping_phone\n    \n, \n    \n    \n    shipping_tracking_number\n    \n as \n    \n    shipping_tracking_number\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n, \n    \n    \n    tax_info_tax_id\n    \n as \n    \n    tax_info_tax_id\n    \n, \n    \n    \n    tax_info_type\n    \n as \n    \n    tax_info_type\n    \n, \n    \n    \n    tax_info_verification_status\n    \n as \n    \n    tax_info_verification_status\n    \n, \n    \n    \n    tax_info_verification_verified_name\n    \n as \n    \n    tax_info_verification_verified_name\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as customer_id,\n        account_balance,\n        address_city as customer_address_city,\n        address_country as customer_address_country,\n        address_line_1 as customer_address_line_1,\n        address_line_2 as customer_address_line_2,\n        address_postal_code as customer_address_postal_code,\n        address_state as customer_address_state,\n        balance as customer_balance,\n        bank_account_id,\n        cast(created as timestamp) as created_at,\n        currency,\n        default_card_id,\n        delinquent as is_delinquent,\n        description,\n        email,\n        metadata,\n        name as customer_name,\n        phone,\n        shipping_address_city,\n        shipping_address_country,\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_postal_code,\n        shipping_address_state,\n        shipping_name,\n        shipping_phone,\n        source_relation,\n        coalesce(is_deleted, false) as is_deleted\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__customer`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:30.906347Z", "completed_at": "2024-08-13T16:33:31.276166Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:31.276600Z", "completed_at": "2024-08-13T16:33:31.276605Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.37103796005249023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__fee", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__fee_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        balance_transaction_id,\n        index,\n        amount,\n        application,\n        currency,\n        description,\n        type,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__fee`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:31.130099Z", "completed_at": "2024-08-13T16:33:31.531150Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:31.531576Z", "completed_at": "2024-08-13T16:33:31.531581Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.40244102478027344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__invoice_line_item", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice_line_item_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discountable\n    \n as \n    \n    discountable\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_item_id\n    \n as \n    \n    invoice_item_id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    period_end\n    \n as \n    \n    period_end\n    \n, \n    \n    \n    period_start\n    \n as \n    \n    period_start\n    \n, \n    \n    \n    plan_id\n    \n as \n    \n    plan_id\n    \n, \n    \n    \n    price_id\n    \n as \n    \n    price_id\n    \n, \n    \n    \n    proration\n    \n as \n    \n    proration\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    subscription_item_id\n    \n as \n    \n    subscription_item_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unique_id\n    \n as \n    \n    unique_id\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_line_item_id,\n        invoice_id,\n        invoice_item_id,\n        amount,\n        currency,\n        description,\n        discountable as is_discountable,\n        plan_id,\n        price_id,\n        proration,\n        quantity,\n        subscription_id,\n        subscription_item_id,\n        type,\n        unique_id as unique_invoice_line_item_id,\n        period_start,\n        period_end,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n\n    \n    and id not like 'sub%' -- ids starting with 'sub' are temporary and are replaced by permanent ids starting with 'sli' \n    \n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice_line_item`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:31.277913Z", "completed_at": "2024-08-13T16:33:31.684391Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:31.684855Z", "completed_at": "2024-08-13T16:33:31.684860Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.40774106979370117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__invoice", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount_due\n    \n as \n    \n    amount_due\n    \n, \n    \n    \n    amount_paid\n    \n as \n    \n    amount_paid\n    \n, \n    \n    \n    amount_remaining\n    \n as \n    \n    amount_remaining\n    \n, \n    \n    \n    application_fee_amount\n    \n as \n    \n    application_fee_amount\n    \n, \n    \n    \n    post_payment_credit_notes_amount\n    \n as \n    \n    post_payment_credit_notes_amount\n    \n, \n    \n    \n    pre_payment_credit_notes_amount\n    \n as \n    \n    pre_payment_credit_notes_amount\n    \n, \n    \n    \n    attempt_count\n    \n as \n    \n    attempt_count\n    \n, \n    \n    \n    attempted\n    \n as \n    \n    attempted\n    \n, \n    \n    \n    auto_advance\n    \n as \n    \n    auto_advance\n    \n, \n    \n    \n    billing\n    \n as \n    \n    billing\n    \n, \n    \n    \n    billing_reason\n    \n as \n    \n    billing_reason\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    default_source_id\n    \n as \n    \n    default_source_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    ending_balance\n    \n as \n    \n    ending_balance\n    \n, \n    \n    \n    finalized_at\n    \n as \n    \n    finalized_at\n    \n, \n    \n    \n    footer\n    \n as \n    \n    footer\n    \n, \n    \n    \n    hosted_invoice_url\n    \n as \n    \n    hosted_invoice_url\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_pdf\n    \n as \n    \n    invoice_pdf\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    next_payment_attempt\n    \n as \n    \n    next_payment_attempt\n    \n, \n    \n    \n    number\n    \n as \n    \n    number\n    \n, \n    \n    \n    paid\n    \n as \n    \n    paid\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    payment_intent_id\n    \n as \n    \n    payment_intent_id\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    period_end\n    \n as \n    \n    period_end\n    \n, \n    \n    \n    period_start\n    \n as \n    \n    period_start\n    \n, \n    \n    \n    receipt_number\n    \n as \n    \n    receipt_number\n    \n, \n    \n    \n    starting_balance\n    \n as \n    \n    starting_balance\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    status_transitions_finalized_at\n    \n as \n    \n    status_transitions_finalized_at\n    \n, \n    \n    \n    status_transitions_marked_uncollectible_at\n    \n as \n    \n    status_transitions_marked_uncollectible_at\n    \n, \n    \n    \n    status_transitions_paid_at\n    \n as \n    \n    status_transitions_paid_at\n    \n, \n    \n    \n    status_transitions_voided_at\n    \n as \n    \n    status_transitions_voided_at\n    \n, \n    \n    \n    subscription_proration_date\n    \n as \n    \n    subscription_proration_date\n    \n, \n    \n    \n    subtotal\n    \n as \n    \n    subtotal\n    \n, \n    \n    \n    tax\n    \n as \n    \n    tax\n    \n, \n    \n    \n    tax_percent\n    \n as \n    \n    tax_percent\n    \n, \n    \n    \n    threshold_reason_amount_gte\n    \n as \n    \n    threshold_reason_amount_gte\n    \n, \n    \n    \n    total\n    \n as \n    \n    total\n    \n, \n    \n    \n    webhooks_delivered_at\n    \n as \n    \n    webhooks_delivered_at\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_id,\n        default_payment_method_id,\n        payment_intent_id,\n        subscription_id,\n        amount_due,\n        amount_paid,\n        amount_remaining,\n        post_payment_credit_notes_amount,\n        pre_payment_credit_notes_amount,\n        attempt_count,\n        auto_advance,\n        billing_reason,\n        charge_id,\n        cast(created as timestamp) as created_at,\n        currency,\n        customer_id,\n        description,\n        due_date,\n        metadata,\n        number,\n        paid as is_paid,\n        receipt_number,\n        status,\n        subtotal,\n        tax,\n        tax_percent,\n        total,\n        period_start,\n        period_end,\n        cast(status_transitions_finalized_at as timestamp) as status_transitions_finalized_at,\n        cast(status_transitions_marked_uncollectible_at as timestamp) as status_transitions_marked_uncollectible_at,\n        cast(status_transitions_paid_at as timestamp) as status_transitions_paid_at,\n        cast(status_transitions_voided_at as timestamp) as status_transitions_voided_at,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n    and not coalesce(is_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:31.533095Z", "completed_at": "2024-08-13T16:33:31.930069Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:31.930510Z", "completed_at": "2024-08-13T16:33:31.930515Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3987288475036621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_intent", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_intent_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_capturable\n    \n as \n    \n    amount_capturable\n    \n, \n    \n    \n    amount_received\n    \n as \n    \n    amount_received\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    application_fee_amount\n    \n as \n    \n    application_fee_amount\n    \n, \n    \n    \n    canceled_at\n    \n as \n    \n    canceled_at\n    \n, \n    \n    \n    cancellation_reason\n    \n as \n    \n    cancellation_reason\n    \n, \n    \n    \n    capture_method\n    \n as \n    \n    capture_method\n    \n, \n    \n    \n    confirmation_method\n    \n as \n    \n    confirmation_method\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_payment_error_charge_id\n    \n as \n    \n    last_payment_error_charge_id\n    \n, \n    \n    \n    last_payment_error_code\n    \n as \n    \n    last_payment_error_code\n    \n, \n    \n    \n    last_payment_error_decline_code\n    \n as \n    \n    last_payment_error_decline_code\n    \n, \n    \n    \n    last_payment_error_doc_url\n    \n as \n    \n    last_payment_error_doc_url\n    \n, \n    \n    \n    last_payment_error_message\n    \n as \n    \n    last_payment_error_message\n    \n, \n    \n    \n    last_payment_error_param\n    \n as \n    \n    last_payment_error_param\n    \n, \n    \n    \n    last_payment_error_source_id\n    \n as \n    \n    last_payment_error_source_id\n    \n, \n    \n    \n    last_payment_error_type\n    \n as \n    \n    last_payment_error_type\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    on_behalf_of\n    \n as \n    \n    on_behalf_of\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    receipt_email\n    \n as \n    \n    receipt_email\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    transfer_data_destination\n    \n as \n    \n    transfer_data_destination\n    \n, \n    \n    \n    transfer_group\n    \n as \n    \n    transfer_group\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_intent_id,\n        amount,\n        amount_capturable,\n        amount_received,\n        application,\n        application_fee_amount,\n        cast(canceled_at as timestamp) as canceled_at,\n        cancellation_reason,\n        capture_method,\n        confirmation_method,\n        cast(created as timestamp) as created_at,\n        currency,\n        customer_id,\n        description,\n        metadata,\n        payment_method_id,\n        receipt_email,\n        statement_descriptor,\n        status,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_intent`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:31.686572Z", "completed_at": "2024-08-13T16:33:32.050926Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:32.052897Z", "completed_at": "2024-08-13T16:33:32.052924Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3687930107116699, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_method_card", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_method_card_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    brand\n    \n as \n    \n    brand\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    funding\n    \n as \n    \n    funding\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    wallet_type\n    \n as \n    \n    wallet_type\n    \n, \n    \n    \n    three_d_secure_authentication_flow\n    \n as \n    \n    three_d_secure_authentication_flow\n    \n, \n    \n    \n    three_d_secure_result\n    \n as \n    \n    three_d_secure_result\n    \n, \n    \n    \n    three_d_secure_result_reason\n    \n as \n    \n    three_d_secure_result_reason\n    \n, \n    \n    \n    three_d_secure_version\n    \n as \n    \n    three_d_secure_version\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        payment_method_id,\n        brand,\n        funding,\n        charge_id,\n        type,\n        wallet_type,\n        three_d_secure_authentication_flow,\n        three_d_secure_result,\n        three_d_secure_result_reason,\n        three_d_secure_version,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_method_card`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:31.932685Z", "completed_at": "2024-08-13T16:33:32.425869Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:32.426301Z", "completed_at": "2024-08-13T16:33:32.426307Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4945180416107178, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_method", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_method_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    billing_detail_address_city\n    \n as \n    \n    billing_detail_address_city\n    \n, \n    \n    \n    billing_detail_address_country\n    \n as \n    \n    billing_detail_address_country\n    \n, \n    \n    \n    billing_detail_address_line_1\n    \n as \n    \n    billing_detail_address_line_1\n    \n, \n    \n    \n    billing_detail_address_line_2\n    \n as \n    \n    billing_detail_address_line_2\n    \n, \n    \n    \n    billing_detail_address_postal_code\n    \n as \n    \n    billing_detail_address_postal_code\n    \n, \n    \n    \n    billing_detail_address_state\n    \n as \n    \n    billing_detail_address_state\n    \n, \n    \n    \n    billing_detail_email\n    \n as \n    \n    billing_detail_email\n    \n, \n    \n    \n    billing_detail_name\n    \n as \n    \n    billing_detail_name\n    \n, \n    \n    \n    billing_detail_phone\n    \n as \n    \n    billing_detail_phone\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_method_id,\n        cast(created as timestamp) as created_at,\n        customer_id,\n        metadata,\n        type,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_method`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:32.057163Z", "completed_at": "2024-08-13T16:33:32.532717Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:32.535063Z", "completed_at": "2024-08-13T16:33:32.535076Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.48180198669433594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payout", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payout_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    arrival_date\n    \n as \n    \n    arrival_date\n    \n, \n    \n    \n    automatic\n    \n as \n    \n    automatic\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    destination_bank_account_id\n    \n as \n    \n    destination_bank_account_id\n    \n, \n    \n    \n    destination_card_id\n    \n as \n    \n    destination_card_id\n    \n, \n    \n    \n    failure_balance_transaction_id\n    \n as \n    \n    failure_balance_transaction_id\n    \n, \n    \n    \n    failure_code\n    \n as \n    \n    failure_code\n    \n, \n    \n    \n    failure_message\n    \n as \n    \n    failure_message\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    method\n    \n as \n    \n    method\n    \n, \n    \n    \n    source_type\n    \n as \n    \n    source_type\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payout_id,\n        amount,\n        cast(arrival_date as timestamp) as arrival_date_at,\n        automatic as is_automatic,\n        balance_transaction_id,\n        cast(created as timestamp) as created_at,\n        currency,\n        description,\n        destination_bank_account_id,\n        destination_card_id,\n        metadata,\n        method,\n        source_type,\n        status,\n        type,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payout`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:32.428359Z", "completed_at": "2024-08-13T16:33:32.908997Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:32.909414Z", "completed_at": "2024-08-13T16:33:32.909419Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.48210787773132324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__product", "compiled": true, "compiled_code": "\n\nwith product as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__product_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    fivetran_synced\n    \n , \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    active\n    \n as is_active , \n    cast(null as string) as \n    \n    attributes\n    \n , \n    \n    \n    caption\n    \n as \n    \n    caption\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    cast(null as timestamp) as \n    \n    deactivate_on\n    \n , \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    cast(null as string) as \n    \n    images\n    \n , \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    shippable\n    \n as \n    \n    shippable\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unit_label\n    \n as \n    \n    unit_label\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from product\n),\n\nfinal as (\n\n    select \n        id as product_id,\n        is_active, -- renamed in macro get_product_columns, source column name: active\n        attributes,\n        caption,\n        cast(created as timestamp) as created_at,\n        cast(deactivate_on as timestamp) as deactivate_at,\n        description,\n        images,\n        is_deleted,\n        name,\n        shippable,\n        statement_descriptor,\n        type,\n        unit_label,\n        updated,\n        url,\n        source_relation\n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__product`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:32.543464Z", "completed_at": "2024-08-13T16:33:32.957821Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:32.958272Z", "completed_at": "2024-08-13T16:33:32.958277Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.41782093048095703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__refund", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__refund_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    payment_intent_id\n    \n as \n    \n    payment_intent_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    failure_balance_transaction_id\n    \n as \n    \n    failure_balance_transaction_id\n    \n, \n    \n    \n    failure_reason\n    \n as \n    \n    failure_reason\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    receipt_number\n    \n as \n    \n    receipt_number\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as refund_id,\n        payment_intent_id,\n        balance_transaction_id,\n        charge_id,\n        amount,\n        cast(created as timestamp) as created_at,\n        currency,\n        description,\n        metadata,\n        reason,\n        receipt_number,\n        status,\n        source_relation\n\n        \n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__refund`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:32.960299Z", "completed_at": "2024-08-13T16:33:32.969752Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:32.970313Z", "completed_at": "2024-08-13T16:33:32.970319Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011067867279052734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__balance_transaction_balance_transaction_id__source_relation.e83fa67eba", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__balance_transaction`\n    group by balance_transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:32.971945Z", "completed_at": "2024-08-13T16:33:32.977331Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:32.977818Z", "completed_at": "2024-08-13T16:33:32.977824Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00699615478515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__balance_transaction_balance_transaction_id.0ac20e778f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect balance_transaction_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__balance_transaction`\nwhere balance_transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:32.979582Z", "completed_at": "2024-08-13T16:33:32.985462Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:32.985910Z", "completed_at": "2024-08-13T16:33:32.985916Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007328987121582031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__account_account_id__source_relation.822bb93896", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__account`\n    group by account_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:32.987502Z", "completed_at": "2024-08-13T16:33:32.990284Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:32.990821Z", "completed_at": "2024-08-13T16:33:32.990826Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004390239715576172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__account_account_id.374858379a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__account`\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:32.992307Z", "completed_at": "2024-08-13T16:33:32.994652Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:32.995054Z", "completed_at": "2024-08-13T16:33:32.995058Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003618955612182617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.int_stripe__incomplete_charges", "compiled": true, "compiled_code": "with charge as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__charge`\n\n)\n\nselect \n  balance_transaction_id,\n  created_at,\n  customer_id,\n  connected_account_id,\n  amount,\n  source_relation\nfrom charge\nwhere not is_captured", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stripe`.`int_stripe__incomplete_charges`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:32.996389Z", "completed_at": "2024-08-13T16:33:32.999750Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.000312Z", "completed_at": "2024-08-13T16:33:33.000317Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0048902034759521484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__charge_charge_id__source_relation.4616b292a1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__charge`\n    group by charge_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.001876Z", "completed_at": "2024-08-13T16:33:33.004368Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.004744Z", "completed_at": "2024-08-13T16:33:33.004748Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0036978721618652344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__charge_charge_id.8941bc704a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__charge`\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.006123Z", "completed_at": "2024-08-13T16:33:33.008846Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.009216Z", "completed_at": "2024-08-13T16:33:33.009220Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00398707389831543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__card_card_id__source_relation.6e04594797", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        card_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__card`\n    group by card_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.010407Z", "completed_at": "2024-08-13T16:33:33.012499Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.012840Z", "completed_at": "2024-08-13T16:33:33.012843Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0031731128692626953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__card_card_id.edadd3106a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect card_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__card`\nwhere card_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.013963Z", "completed_at": "2024-08-13T16:33:33.017039Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.017422Z", "completed_at": "2024-08-13T16:33:33.017427Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004213809967041016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__discount_discount_id__source_relation.08900d34d5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        discount_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__discount`\n    group by discount_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.018623Z", "completed_at": "2024-08-13T16:33:33.022265Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.022628Z", "completed_at": "2024-08-13T16:33:33.022632Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0047760009765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__dispute_dispute_id__source_relation.3fe3205476", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        dispute_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__dispute`\n    group by dispute_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.023837Z", "completed_at": "2024-08-13T16:33:33.026397Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.026762Z", "completed_at": "2024-08-13T16:33:33.026766Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003677845001220703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__customer_customer_id__source_relation.3fa0f43271", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__customer`\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.027905Z", "completed_at": "2024-08-13T16:33:33.029775Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.030079Z", "completed_at": "2024-08-13T16:33:33.030082Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0028569698333740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__customer_customer_id.2e70421da0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__customer`\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.031311Z", "completed_at": "2024-08-13T16:33:33.033576Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.033918Z", "completed_at": "2024-08-13T16:33:33.033921Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0034079551696777344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__fee_balance_transaction_id__index__source_relation.d2b1cfff07", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, index, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__fee`\n    group by balance_transaction_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.035037Z", "completed_at": "2024-08-13T16:33:33.036918Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.037251Z", "completed_at": "2024-08-13T16:33:33.037255Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0029299259185791016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__fee_balance_transaction_id.725d4ac005", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect balance_transaction_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__fee`\nwhere balance_transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.038521Z", "completed_at": "2024-08-13T16:33:33.040838Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.041181Z", "completed_at": "2024-08-13T16:33:33.041184Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0033669471740722656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__invoice_line_item_invoice_line_item_id__invoice_id__source_relation.d2ff4b8aed", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_line_item_id, invoice_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice_line_item`\n    group by invoice_line_item_id, invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.042205Z", "completed_at": "2024-08-13T16:33:33.044109Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.044466Z", "completed_at": "2024-08-13T16:33:33.044469Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.002919912338256836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__invoice_line_item_invoice_line_item_id.5b9c83b5f3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_line_item_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice_line_item`\nwhere invoice_line_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.045466Z", "completed_at": "2024-08-13T16:33:33.047300Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.047608Z", "completed_at": "2024-08-13T16:33:33.047610Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0027980804443359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__invoice_invoice_id__source_relation.f632654e72", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice`\n    group by invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.048878Z", "completed_at": "2024-08-13T16:33:33.052510Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.052886Z", "completed_at": "2024-08-13T16:33:33.052890Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0049228668212890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__invoice_invoice_id.34cc0ff095", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice`\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.054279Z", "completed_at": "2024-08-13T16:33:33.056725Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.057061Z", "completed_at": "2024-08-13T16:33:33.057065Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0035200119018554688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_intent_payment_intent_id__source_relation.046730da02", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_intent_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_intent`\n    group by payment_intent_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.058203Z", "completed_at": "2024-08-13T16:33:33.060398Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.060725Z", "completed_at": "2024-08-13T16:33:33.060728Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003326892852783203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__payment_intent_payment_intent_id.cb5b4d09eb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_intent_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_intent`\nwhere payment_intent_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.061933Z", "completed_at": "2024-08-13T16:33:33.063985Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.064357Z", "completed_at": "2024-08-13T16:33:33.064360Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0031659603118896484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_card_payment_method_id__source_relation.fe1f48acd0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_method_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_method_card`\n    group by payment_method_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.065486Z", "completed_at": "2024-08-13T16:33:33.067742Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.068211Z", "completed_at": "2024-08-13T16:33:33.068214Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003477811813354492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__payment_method_card_payment_method_id.f246b11438", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_method_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_method_card`\nwhere payment_method_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.069383Z", "completed_at": "2024-08-13T16:33:33.072258Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.072651Z", "completed_at": "2024-08-13T16:33:33.072655Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004005908966064453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_payment_method_id__source_relation.02a8143517", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_method_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_method`\n    group by payment_method_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.073743Z", "completed_at": "2024-08-13T16:33:33.075808Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.076148Z", "completed_at": "2024-08-13T16:33:33.076151Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003077268600463867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__payment_method_payment_method_id.0a8907c471", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_method_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_method`\nwhere payment_method_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.077263Z", "completed_at": "2024-08-13T16:33:33.079499Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.079835Z", "completed_at": "2024-08-13T16:33:33.079838Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003309011459350586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payout_payout_id__source_relation.f9897a29ec", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payout_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payout`\n    group by payout_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.080992Z", "completed_at": "2024-08-13T16:33:33.083747Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.084061Z", "completed_at": "2024-08-13T16:33:33.084064Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0037789344787597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__payout_payout_id.6864a8acfc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payout_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payout`\nwhere payout_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.085156Z", "completed_at": "2024-08-13T16:33:33.087608Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.088019Z", "completed_at": "2024-08-13T16:33:33.088029Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003725767135620117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__product_product_id__source_relation.cfe44d459e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__product`\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.089428Z", "completed_at": "2024-08-13T16:33:33.099904Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.100497Z", "completed_at": "2024-08-13T16:33:33.100503Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012064933776855469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__refund_refund_id__source_relation.93aa6111ec", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__refund`\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.101913Z", "completed_at": "2024-08-13T16:33:33.104040Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.104408Z", "completed_at": "2024-08-13T16:33:33.104412Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0032329559326171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__refund_refund_id.7c6dcedec0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__refund`\nwhere refund_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:32.911167Z", "completed_at": "2024-08-13T16:33:33.265354Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.265991Z", "completed_at": "2024-08-13T16:33:33.265996Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.35582613945007324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__transfer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__transfer_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_reversed\n    \n as \n    \n    amount_reversed\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    destination\n    \n as \n    \n    destination\n    \n, \n    \n    \n    destination_payment\n    \n as \n    \n    destination_payment\n    \n, \n    \n    \n    destination_payment_id\n    \n as \n    \n    destination_payment_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    reversed\n    \n as \n    \n    reversed\n    \n, \n    \n    \n    source_transaction\n    \n as \n    \n    source_transaction\n    \n, \n    \n    \n    source_transaction_id\n    \n as \n    \n    source_transaction_id\n    \n, \n    \n    \n    source_type\n    \n as \n    \n    source_type\n    \n, \n    \n    \n    transfer_group\n    \n as \n    \n    transfer_group\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as transfer_id,\n        amount as transfer_amount,\n        amount_reversed as transfer_amount_reversed,\n        balance_transaction_id,\n        cast(created as timestamp) as transfer_created_at,\n        currency as transfer_currency,\n        description as transfer_description,\n        destination as transfer_destination,\n        destination_payment,\n        destination_payment_id,\n        metadata as transfer_metadata,\n        reversed as transfer_is_reversed,\n        source_transaction,\n        source_transaction_id,\n        source_type,\n        transfer_group,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__transfer`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:33.267787Z", "completed_at": "2024-08-13T16:33:33.271562Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:33.272013Z", "completed_at": "2024-08-13T16:33:33.272020Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0053501129150390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__transfer_transfer_id__source_relation.ade160ba67", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transfer_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__transfer`\n    group by transfer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:29.176781Z", "completed_at": "2024-08-13T16:33:35.918064Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:35.919038Z", "completed_at": "2024-08-13T16:33:35.919058Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 6.743695020675659, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__subscription_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`subscription_history`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__subscription_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:28.793537Z", "completed_at": "2024-08-13T16:33:37.796033Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:37.797974Z", "completed_at": "2024-08-13T16:33:37.797989Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 9.008903980255127, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__price_plan_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`price`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__price_plan_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:35.923295Z", "completed_at": "2024-08-13T16:33:39.419111Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:39.420408Z", "completed_at": "2024-08-13T16:33:39.420425Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.499746799468994, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__subscription", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__subscription_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_active\n    \n as \n    \n    _fivetran_active\n    \n, \n    \n    \n    application_fee_percent\n    \n as \n    \n    application_fee_percent\n    \n, \n    \n    \n    billing\n    \n as \n    \n    billing\n    \n, \n    \n    \n    billing_cycle_anchor\n    \n as \n    \n    billing_cycle_anchor\n    \n, \n    \n    \n    billing_threshold_amount_gte\n    \n as \n    \n    billing_threshold_amount_gte\n    \n, \n    \n    \n    billing_threshold_reset_billing_cycle_anchor\n    \n as \n    \n    billing_threshold_reset_billing_cycle_anchor\n    \n, \n    \n    \n    cancel_at\n    \n as \n    \n    cancel_at\n    \n, \n    \n    \n    cancel_at_period_end\n    \n as \n    \n    cancel_at_period_end\n    \n, \n    \n    \n    canceled_at\n    \n as \n    \n    canceled_at\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    current_period_end\n    \n as \n    \n    current_period_end\n    \n, \n    \n    \n    current_period_start\n    \n as \n    \n    current_period_start\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    days_until_due\n    \n as \n    \n    days_until_due\n    \n, \n    \n    \n    default_source_id\n    \n as \n    \n    default_source_id\n    \n, \n    \n    \n    ended_at\n    \n as \n    \n    ended_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    latest_invoice_id\n    \n as \n    \n    latest_invoice_id\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    pending_setup_intent_id\n    \n as \n    \n    pending_setup_intent_id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    tax_percent\n    \n as \n    \n    tax_percent\n    \n, \n    \n    \n    trial_end\n    \n as \n    \n    trial_end\n    \n, \n    \n    \n    trial_start\n    \n as \n    \n    trial_start\n    \n, \n    \n    \n    pause_collection_behavior\n    \n as \n    \n    pause_collection_behavior\n    \n, \n    \n    \n    pause_collection_resumes_at\n    \n as \n    \n    pause_collection_resumes_at\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as subscription_id,\n        latest_invoice_id,\n        customer_id,\n        default_payment_method_id,\n        pending_setup_intent_id,\n        status,\n        billing,\n        billing_cycle_anchor,\n        cast(cancel_at as timestamp) as cancel_at,\n        cancel_at_period_end as is_cancel_at_period_end,\n        cast(canceled_at as timestamp) as canceled_at,\n        cast(created as timestamp) as created_at,\n        current_period_start,\n        current_period_end,\n        days_until_due,\n        metadata,\n        cast(start_date as timestamp) as start_date_at,\n        cast(ended_at as timestamp) as ended_at,\n        pause_collection_behavior,\n        cast(pause_collection_resumes_at as timestamp) as pause_collection_resumes_at,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n    \n        and coalesce(_fivetran_active, true)\n    \n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__subscription`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:39.428939Z", "completed_at": "2024-08-13T16:33:39.457672Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:39.459466Z", "completed_at": "2024-08-13T16:33:39.459476Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03635525703430176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__balance_transactions", "compiled": true, "compiled_code": "with balance_transaction as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__balance_transaction`\n\n), account as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__account`\n\n), cards as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__card`\n\n), charge as (\n    \n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__charge`\n\n), customer as (\n    \n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__customer`\n\n), dispute as (\n    \n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__dispute`\n\n\n), invoice as (\n    \n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice`\n\n\n), payment_intent as (\n    \n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_intent`\n\n\n), payment_method as (\n    \n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_method`\n\n), payment_method_card as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_method_card`\n\n\n), payout as (\n    \n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payout`\n\n), refund as (\n    \n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__refund`\n\n\n), subscription as (\n    \n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__subscription`\n\n\n), transfers as (\n    \n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__transfer`\n\n)\n\nselect\n    balance_transaction.balance_transaction_id,\n    balance_transaction.created_at as balance_transaction_created_at,\n    balance_transaction.available_on as balance_transaction_available_on,\n    balance_transaction.currency as balance_transaction_currency,\n    balance_transaction.amount as balance_transaction_amount,\n    balance_transaction.fee as balance_transaction_fee,\n    balance_transaction.net as balance_transaction_net,\n    balance_transaction.source as balance_transaction_source_id,\n    balance_transaction.description as balance_transaction_description,\n    balance_transaction.type as balance_transaction_type,\n    coalesce(balance_transaction.reporting_category,\n        case\n            when balance_transaction.type in ('charge', 'payment') then 'charge'\n            when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n            when balance_transaction.type in ('payout_cancel', 'payout_failure') then 'payout_reversal'\n            when balance_transaction.type in ('transfer', 'recipient_transfer') then 'transfer'\n            when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n            else balance_transaction.type end)\n    as balance_transaction_reporting_category,\n    case\n        when balance_transaction.type in ('charge', 'payment') then charge.amount \n        when balance_transaction.type in ('refund', 'payment_refund') then refund.amount\n        when dispute_id is not null then dispute.dispute_amount\n        else null\n    end as customer_facing_amount,\n    case \n        when balance_transaction.type = 'charge' then charge.currency \n    end as customer_facing_currency,\n    \n\n        datetime_add(\n            cast( balance_transaction.available_on as datetime),\n        interval 1 day\n        )\n\n as effective_at,\n    case\n        when payout.is_automatic = true then payout.payout_id \n        else null\n    end as automatic_payout_id,\n    payout.payout_id,\n    payout.created_at as payout_created_at,\n    payout.currency as payout_currency,\n    payout.is_automatic as payout_is_automatic,\n    payout.arrival_date_at as payout_arrival_date_at,\n    case\n        when payout.is_automatic = true then payout.arrival_date_at\n        else null\n    end as automatic_payout_effective_at,\n    payout.type as payout_type,\n    payout.status as payout_status,\n    payout.description as payout_description,\n    payout.destination_bank_account_id,\n    payout.destination_card_id,\n    coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n    charge.receipt_email,\n    customer.email as customer_email,\n    customer.customer_name,\n    customer.description as customer_description,\n    customer.shipping_address_line_1 as customer_shipping_address_line_1,\n    customer.shipping_address_line_2 as customer_shipping_address_line_2,\n    customer.shipping_address_city as customer_shipping_address_city,\n    customer.shipping_address_state as customer_shipping_address_state,\n    customer.shipping_address_postal_code as customer_shipping_address_postal_code,\n    customer.shipping_address_country as customer_shipping_address_country,\n    customer.customer_address_line_1,\n    customer.customer_address_line_2,\n    customer.customer_address_city,\n    customer.customer_address_state,\n    customer.customer_address_postal_code,\n    customer.customer_address_country,\n    charge.shipping_address_line_1 as charge_shipping_address_line_1,\n    charge.shipping_address_line_2 as charge_shipping_address_line_2,\n    charge.shipping_address_city as charge_shipping_address_city,\n    charge.shipping_address_state as charge_shipping_address_state,\n    charge.shipping_address_postal_code as charge_shipping_address_postal_code,\n    charge.shipping_address_country as charge_shipping_address_country,\n    cards.card_address_line_1,\n    cards.card_address_line_2,\n    cards.card_address_city,\n    cards.card_address_state,\n    cards.card_address_postal_code,\n    cards.card_address_country,\n    coalesce(charge.charge_id, refund.charge_id, dispute.charge_id) as charge_id,\n    charge.created_at as charge_created_at,\n    payment_intent.payment_intent_id,\n\n    \n    invoice.invoice_id,\n    invoice.number as invoice_number,\n    \n\n    \n    subscription.subscription_id,\n    \n\n    \n    payment_method.type as payment_method_type,\n    payment_method_card.brand as payment_method_brand,\n    payment_method_card.funding as payment_method_funding,\n    \n\n    cards.brand as card_brand,\n    cards.funding as card_funding,\n    cards.country as card_country,\n    charge.statement_descriptor as charge_statement_descriptor ,\n    dispute.dispute_id,\n    dispute.dispute_reason,\n    refund.refund_id,\n    refund.reason as refund_reason,\n    transfers.transfer_id,\n    coalesce(balance_transaction.connected_account_id, charge.connected_account_id) as connected_account_id,\n    connected_account.country as connected_account_country,\n    case \n        when charge.connected_account_id is not null then charge.charge_id\n        else null\n    end as connected_account_direct_charge_id,\n    balance_transaction.source_relation\n\nfrom balance_transaction\n\nleft join payout \n    on payout.balance_transaction_id = balance_transaction.balance_transaction_id\n    and payout.source_relation = balance_transaction.source_relation\nleft join account connected_account\n    on balance_transaction.connected_account_id = connected_account.account_id\n    and balance_transaction.source_relation = connected_account.source_relation\nleft join charge\n    on charge.balance_transaction_id = balance_transaction.balance_transaction_id\n    and charge.source_relation = balance_transaction.source_relation\nleft join customer \n    on charge.customer_id = customer.customer_id\n    and charge.source_relation = customer.source_relation\nleft join cards\n    on charge.card_id = cards.card_id\n    and charge.source_relation = cards.source_relation\nleft join payment_intent\n    on charge.payment_intent_id = payment_intent.payment_intent_id\n    and charge.source_relation = payment_intent.source_relation\n\n\nleft join payment_method\n    on charge.payment_method_id = payment_method.payment_method_id\n    and charge.source_relation = payment_method.source_relation\nleft join payment_method_card \n    on payment_method_card.payment_method_id = payment_method.payment_method_id\n    and charge.source_relation = balance_transaction.source_relation\n\n\n\nleft join invoice \n    on charge.invoice_id = invoice.invoice_id\n    and charge.source_relation = invoice.source_relation\n\n\n\nleft join subscription\n    on subscription.latest_invoice_id =  charge.invoice_id\n    and subscription.source_relation =  charge.source_relation\n\n\nleft join refund\n    on refund.balance_transaction_id = balance_transaction.balance_transaction_id\n    and refund.source_relation = balance_transaction.source_relation\nleft join transfers \n    on transfers.balance_transaction_id = balance_transaction.balance_transaction_id\n    and transfers.source_relation = balance_transaction.source_relation\nleft join charge as refund_charge \n    on refund.charge_id = refund_charge.charge_id\n    and refund.source_relation = refund_charge.source_relation\nleft join dispute\n    on charge.charge_id = dispute.charge_id\n    and charge.source_relation = dispute.source_relation", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__balance_transactions`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:39.447326Z", "completed_at": "2024-08-13T16:33:39.458044Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:39.459735Z", "completed_at": "2024-08-13T16:33:39.459739Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03622078895568848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__subscription_details", "compiled": true, "compiled_code": "\n\nwith invoice as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice`  \n\n), charge as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__charge`  \n\n), invoice_line_item as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice_line_item`  \n\n), subscription as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__subscription`  \n\n), customer as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__customer`  \n\n), line_items_groups as (\n\n  select\n    invoice.invoice_id,\n    invoice.amount_due,\n    invoice.amount_paid,\n    invoice.amount_remaining,\n    invoice.created_at,\n    invoice.source_relation,\n    max(invoice_line_item.subscription_id) as subscription_id,\n    coalesce(sum(invoice_line_item.amount),0) as total_line_item_amount,\n    coalesce(count(distinct invoice_line_item.unique_invoice_line_item_id),0) as number_of_line_items\n  from invoice_line_item\n  join invoice \n    on invoice.invoice_id = invoice_line_item.invoice_id\n  group by 1, 2, 3, 4, 5, 6\n\n), grouped_by_subscription as (\n\n  select\n    subscription_id,\n    source_relation,\n    count(distinct invoice_id) as number_invoices_generated,\n    sum(amount_due) as total_amount_billed,\n    sum(amount_paid) as total_amount_paid,\n    sum(amount_remaining) total_amount_remaining,\n    max(created_at) as most_recent_invoice_created_at,\n    avg(amount_due) as average_invoice_amount,\n    avg(total_line_item_amount) as average_line_item_amount,\n    avg(number_of_line_items) as avg_num_line_items\n  from line_items_groups\n  group by 1, 2\n\n)\n\n\nselect\n  subscription.subscription_id,\n  subscription.customer_id,\n  customer.description as customer_description,\n  customer.email as customer_email,\n  subscription.status,\n  subscription.start_date_at,\n  subscription.ended_at,\n  subscription.billing,\n  subscription.billing_cycle_anchor,\n  subscription.canceled_at,\n  subscription.created_at,\n  subscription.current_period_start,\n  subscription.current_period_end,\n  subscription.days_until_due,\n  subscription.is_cancel_at_period_end,\n  subscription.cancel_at,\n  number_invoices_generated,\n  total_amount_billed,\n  total_amount_paid,\n  total_amount_remaining,\n  most_recent_invoice_created_at,\n  average_invoice_amount,\n  average_line_item_amount,\n  avg_num_line_items,\n  subscription.source_relation\nfrom subscription\nleft join grouped_by_subscription \n  on subscription.subscription_id = grouped_by_subscription.subscription_id\n  and subscription.source_relation = grouped_by_subscription.source_relation\nleft join customer\n  on subscription.customer_id = customer.customer_id\n  and subscription.source_relation = customer.source_relation", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__subscription_details`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:39.453789Z", "completed_at": "2024-08-13T16:33:39.458355Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:39.459988Z", "completed_at": "2024-08-13T16:33:39.459992Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03582000732421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__subscription_subscription_id__source_relation.1b87d4205c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        subscription_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__subscription`\n    group by subscription_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:39.465570Z", "completed_at": "2024-08-13T16:33:39.482769Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:39.483981Z", "completed_at": "2024-08-13T16:33:39.483993Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.020868778228759766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__subscription_subscription_id.b242b1f7bc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__subscription`\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:39.479364Z", "completed_at": "2024-08-13T16:33:39.483015Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:39.484210Z", "completed_at": "2024-08-13T16:33:39.484213Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02053689956665039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__activity_itemized_2", "compiled": true, "compiled_code": "with balance_transaction_enhanced as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__balance_transactions`\n\n)\n\nselect \n    balance_transaction_id,\n    balance_transaction_created_at,\n    balance_transaction_reporting_category,\n    balance_transaction_currency as currency,\n    balance_transaction_amount as amount,\n    charge_id,\n    payment_intent_id,\n    refund_id,\n    dispute_id,\n\n    \n    invoice_id,\n    invoice_number,\n    \n\n    \n    subscription_id,\n    \n\n    transfer_id,\n    customer_id,\n    customer_email,\n    customer_name,\n    customer_description,\n    customer_shipping_address_line_1,\n    customer_shipping_address_line_2,\n    customer_shipping_address_city,\n    customer_shipping_address_state,\n    customer_shipping_address_postal_code,\n    customer_shipping_address_country,\n    customer_address_line_1,\n    customer_address_line_2,\n    customer_address_city,\n    customer_address_state,\n    customer_address_postal_code,\n    customer_address_country,\n    charge_shipping_address_line_1 as shipping_address_line_1,\n    charge_shipping_address_line_2 as shipping_address_line_2,\n    charge_shipping_address_city as shipping_address_city,\n    charge_shipping_address_state as shipping_address_state,\n    charge_shipping_address_postal_code as shipping_address_postal_code,\n    charge_shipping_address_country as shipping_address_country,\n    card_address_line_1,\n    card_address_line_2,\n    card_address_city,\n    card_address_state,\n    card_address_postal_code,\n    card_address_country,\n    automatic_payout_id,\n    automatic_payout_effective_at,\n\n    \n    payment_method_type,\n    \n    \n    card_brand,\n    card_funding,\n    card_country,\n    charge_statement_descriptor as statement_descriptor,\n    customer_facing_amount,\n    balance_transaction_description,\n    connected_account_id,\n    connected_account_country,\n    connected_account_direct_charge_id,\n    source_relation\n\nfrom balance_transaction_enhanced", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__activity_itemized_2`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:39.486913Z", "completed_at": "2024-08-13T16:33:39.513645Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:39.514278Z", "completed_at": "2024-08-13T16:33:39.514286Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02877497673034668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__balance_change_from_activity_itemized_3", "compiled": true, "compiled_code": "with balance_transaction_enhanced as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__balance_transactions`\n\n)\n\nselect \n    balance_transaction_id,\n    balance_transaction_created_at as created,\n    balance_transaction_available_on as available_on,\n    balance_transaction_currency as currency,\n    balance_transaction_amount as gross,\n    balance_transaction_fee as fee,\n    balance_transaction_net as net,\n    balance_transaction_reporting_category as reporting_category,\n    balance_transaction_source_id as source_id,\n    balance_transaction_description as description,\n    customer_facing_amount,\n    customer_facing_currency,\n    automatic_payout_id,\n    automatic_payout_effective_at,\n    customer_id,\n    customer_email,\n    customer_name,\n    customer_description,\n    customer_shipping_address_line_1,\n    customer_shipping_address_line_2,\n    customer_shipping_address_city,\n    customer_shipping_address_state,\n    customer_shipping_address_postal_code,\n    customer_shipping_address_country,\n    customer_address_line_1,\n    customer_address_line_2,\n    customer_address_city,\n    customer_address_state,\n    customer_address_postal_code,\n    customer_address_country,\n    charge_shipping_address_line_1 as shipping_address_line_1,\n    charge_shipping_address_line_2 as shipping_address_line_2,\n    charge_shipping_address_city as shipping_address_city,\n    charge_shipping_address_state as shipping_address_state,\n    charge_shipping_address_postal_code as shipping_address_postal_code,\n    charge_shipping_address_country as shipping_address_country,\n    card_address_line_1,\n    card_address_line_2,\n    card_address_city,\n    card_address_state,\n    card_address_postal_code,\n    card_address_country,\n    charge_id,\n    payment_intent_id,\n    charge_created_at as charge_created,\n\n    \n    invoice_id,\n    invoice_number,\n    \n\n    \n    subscription_id,\n    \n    \n    \n    payment_method_type,\n    \n\n    card_brand,\n    card_funding,\n    card_country,\n    charge_statement_descriptor as statement_descriptor,\n    dispute_reason,\n    connected_account_id,\n    connected_account_country,\n    connected_account_direct_charge_id,\n    source_relation\n\nfrom balance_transaction_enhanced", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__balance_change_from_activity_itemized_3`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:39.515710Z", "completed_at": "2024-08-13T16:33:39.519167Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:39.519537Z", "completed_at": "2024-08-13T16:33:39.519541Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004632234573364258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__ending_balance_reconciliation_itemized_4", "compiled": true, "compiled_code": "with balance_transaction_enhanced as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__balance_transactions`\n    where automatic_payout_id is not null\n\n)\n\nselect\n    automatic_payout_id,\n    payout_arrival_date_at as automatic_payout_effective_at,\n    balance_transaction_id,\n    balance_transaction_created_at as created,\n    balance_transaction_available_on as available_on,\n    balance_transaction_currency as currency,\n    balance_transaction_amount as gross,\n    balance_transaction_fee as fee,\n    balance_transaction_net as net,\n    balance_transaction_reporting_category as reporting_category,\n    balance_transaction_source_id as source_id,\n    balance_transaction_description as description,\n    customer_facing_amount,\n    customer_facing_currency,\n    customer_id,\n    customer_email,\n    customer_name,\n    customer_description,\n    customer_shipping_address_line_1,\n    customer_shipping_address_line_2,\n    customer_shipping_address_city,\n    customer_shipping_address_state,\n    customer_shipping_address_postal_code,\n    customer_shipping_address_country,\n    customer_address_line_1,\n    customer_address_line_2,\n    customer_address_city,\n    customer_address_state,\n    customer_address_postal_code,\n    customer_address_country,\n    charge_shipping_address_line_1 as shipping_address_line_1,\n    charge_shipping_address_line_2 as shipping_address_line_2,\n    charge_shipping_address_city as shipping_address_city,\n    charge_shipping_address_state as shipping_address_state,\n    charge_shipping_address_postal_code as shipping_address_postal_code,\n    charge_shipping_address_country as shipping_address_country,\n    card_address_line_1,\n    card_address_line_2,\n    card_address_city,\n    card_address_state,\n    card_address_postal_code,\n    card_address_country,\n    charge_id,\n    payment_intent_id,\n    charge_created_at as charge_created,\n\n    \n    invoice_id,\n    invoice_number,\n    \n\n    \n    subscription_id,\n    \n    \n    \n    payment_method_type,\n    \n    \n    card_brand,\n    card_funding,\n    card_country,\n    charge_statement_descriptor as statement_descriptor,\n    dispute_reason,\n    connected_account_id, \n    connected_account_country,\n    connected_account_direct_charge_id,\n    source_relation\n\nfrom balance_transaction_enhanced", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__ending_balance_reconciliation_itemized_4`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:39.520830Z", "completed_at": "2024-08-13T16:33:39.523546Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:39.523957Z", "completed_at": "2024-08-13T16:33:39.523964Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0040760040283203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__payout_itemized_3", "compiled": true, "compiled_code": "with balance_transaction_enhanced as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__balance_transactions`\n    where payout_id is not null\n\n)\n\nselect\n    payout_id,\n    case \n        when payout_is_automatic = true then payout_arrival_date_at \n        else payout_created_at\n    end as effective_at,\n    payout_currency as currency,\n    balance_transaction_id,\n    balance_transaction_amount as gross,\n    balance_transaction_fee as fee,\n    balance_transaction_net as net,\n    balance_transaction_reporting_category as reporting_category,\n    balance_transaction_description as description,\n    payout_arrival_date_at as payout_expected_arrival_date,\n    payout_status,\n    case \n        when lower(payout_status) in ('canceled','failed') then payout_created_at\n        else null\n    end as payout_reversed_at,\n    payout_type,\n    payout_description,\n    coalesce(destination_bank_account_id, destination_card_id) as payout_destination_id,\n    source_relation\n\nfrom balance_transaction_enhanced", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__payout_itemized_3`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:39.525427Z", "completed_at": "2024-08-13T16:33:39.527926Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:39.528241Z", "completed_at": "2024-08-13T16:33:39.528245Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0035500526428222656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__balance_transactions_balance_transaction_id__source_relation.e7b1075064", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__balance_transactions`\n    group by balance_transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:39.529290Z", "completed_at": "2024-08-13T16:33:39.531410Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:39.531771Z", "completed_at": "2024-08-13T16:33:39.531775Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003180980682373047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__subscription_details_subscription_id__source_relation.a1aa0c421a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        subscription_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__subscription_details`\n    group by subscription_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:39.533031Z", "completed_at": "2024-08-13T16:33:39.535097Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:39.535432Z", "completed_at": "2024-08-13T16:33:39.535435Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003206014633178711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__activity_itemized_2_balance_transaction_id__source_relation.bfde3a7d9b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__activity_itemized_2`\n    group by balance_transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:39.536591Z", "completed_at": "2024-08-13T16:33:39.538550Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:39.538875Z", "completed_at": "2024-08-13T16:33:39.538877Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003003835678100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__balance_change_from_activity_itemized_3_balance_transaction_id__source_relation.042900aa7d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__balance_change_from_activity_itemized_3`\n    group by balance_transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:39.540490Z", "completed_at": "2024-08-13T16:33:39.543912Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:39.544387Z", "completed_at": "2024-08-13T16:33:39.544393Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005224943161010742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__ending_balance_reconciliation_itemized_4_automatic_payout_id__source_relation.a4e66a7386", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        automatic_payout_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__ending_balance_reconciliation_itemized_4`\n    group by automatic_payout_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:39.545727Z", "completed_at": "2024-08-13T16:33:39.547878Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:39.548231Z", "completed_at": "2024-08-13T16:33:39.548235Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003239154815673828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__payout_itemized_3_payout_id__source_relation.db08f37862", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payout_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__payout_itemized_3`\n    group by payout_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:39.489046Z", "completed_at": "2024-08-13T16:33:40.102610Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:40.104371Z", "completed_at": "2024-08-13T16:33:40.104387Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.6195859909057617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__customer_overview", "compiled": true, "compiled_code": "with balance_transaction_joined as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__balance_transactions`  \n\n), incomplete_charges as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`int_stripe__incomplete_charges`  \n\n), customer as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__customer`  \n\n), transactions_grouped as (\n\n    select\n      customer_id,\n      source_relation,\n      sum(\n        case \n          when balance_transaction_type in ('charge', 'payment') \n          then balance_transaction_amount\n          else 0 \n        end) \n      as total_sales,\n      sum(\n        case \n          when balance_transaction_type in ('payment_refund', 'refund') \n          then balance_transaction_amount\n          else 0 \n        end) \n      as total_refunds,    \n      sum(balance_transaction_amount) as total_gross_transaction_amount,\n      sum(balance_transaction_fee) as total_fees,\n      sum(balance_transaction_net) as total_net_transaction_amount,\n      sum(\n        case \n          when balance_transaction_type in ('charge', 'payment') \n          then 1\n          else 0 \n          end) \n      as total_sales_count, \n      sum(\n        case \n          when balance_transaction_type in ('payment_refund', 'refund') \n          then 1\n          else 0 \n        end) \n      as total_refund_count,   \n      sum(\n        case \n          when balance_transaction_type in ('charge', 'payment') and timestamp_trunc(\n        cast(date(\n    balance_transaction_created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then balance_transaction_amount \n          else 0 \n        end) \n      as sales_this_month,\n      sum(\n        case \n          when balance_transaction_type in ('payment_refund', 'refund') and timestamp_trunc(\n        cast(date(\n    balance_transaction_created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then balance_transaction_amount \n          else 0 \n        end) \n      as refunds_this_month,\n      sum(\n        case \n          when timestamp_trunc(\n        cast(date(\n    balance_transaction_created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then balance_transaction_amount \n          else 0 \n        end) \n      as gross_transaction_amount_this_month,\n      sum(\n        case \n          when timestamp_trunc(\n        cast(date(\n    balance_transaction_created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then balance_transaction_fee \n          else 0 \n        end) \n      as fees_this_month,\n      sum(\n        case \n          when timestamp_trunc(\n        cast(date(\n    balance_transaction_created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then balance_transaction_net \n          else 0 \n        end) \n      as net_transaction_amount_this_month,\n      sum(\n        case \n          when balance_transaction_type in ('charge', 'payment') and timestamp_trunc(\n        cast(date(\n    balance_transaction_created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then 1 \n          else 0 \n        end) \n      as sales_count_this_month,\n      sum(\n        case \n          when balance_transaction_type in ('payment_refund', 'refund') and timestamp_trunc(\n        cast(date(\n    balance_transaction_created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then 1 \n          else 0 \n        end) \n      as refund_count_this_month,\n      min(\n        case \n          when balance_transaction_type in ('charge', 'payment') \n          then date(\n    balance_transaction_created_at\n    \n    )\n          else null \n        end) \n      as first_sale_date,\n      max(\n        case \n          when balance_transaction_type in ('charge', 'payment') \n          then date(\n    balance_transaction_created_at\n    \n    )\n          else null \n        end) \n      as most_recent_sale_date\n    from balance_transaction_joined\n    where balance_transaction_type in ('payment', 'charge', 'payment_refund', 'refund')\n    group by 1,2\n\n), failed_charges_by_customer as (\n\n    select\n      customer_id,\n      source_relation,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount,\n      sum(\n        case \n          when timestamp_trunc(\n        cast(date(\n    created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then 1\n          else 0 \n        end) \n      as failed_charge_count_this_month,\n      sum(\n        case \n          when timestamp_trunc(\n        cast(date(\n    created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then amount\n          else 0 \n        end) \n      as failed_charge_amount_this_month\n    from incomplete_charges\n    group by 1,2\n\n), transactions_not_associated_with_customer as (\n\n    select\n      'No Customer ID' as customer_id,\n      'No Associated Customer' as customer_description,\n      customer.created_at as customer_created_at,\n      customer.currency as customer_currency,\n      customer.`account_balance`,\n  customer.`customer_address_city`,\n  customer.`customer_address_country`,\n  customer.`customer_address_line_1`,\n  customer.`customer_address_line_2`,\n  customer.`customer_address_postal_code`,\n  customer.`customer_address_state`,\n  customer.`customer_balance`,\n  customer.`bank_account_id`,\n  customer.`default_card_id`,\n  customer.`is_delinquent`,\n  customer.`email`,\n  customer.`customer_name`,\n  customer.`phone`,\n  customer.`shipping_address_city`,\n  customer.`shipping_address_country`,\n  customer.`shipping_address_line_1`,\n  customer.`shipping_address_line_2`,\n  customer.`shipping_address_postal_code`,\n  customer.`shipping_address_state`,\n  customer.`shipping_name`,\n  customer.`shipping_phone`,\n  customer.`is_deleted`,\n      coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,\n      coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,\n      coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transaction_amount,\n      coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,\n      coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_transaction_amount,\n      coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,\n      coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    \n      coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,\n      coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,\n      coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,\n      coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,\n      coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,\n      coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,\n      coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,\n      transactions_grouped.first_sale_date,\n      transactions_grouped.most_recent_sale_date,\n      0 as total_failed_charge_count,\n      0 as total_failed_charge_amount,\n      0 as failed_charge_count_this_month,\n      0 as failed_charge_amount_this_month,\n      transactions_grouped.source_relation\n\n    from transactions_grouped\n    left join customer \n        on transactions_grouped.customer_id = customer.customer_id\n        and transactions_grouped.source_relation = customer.source_relation\n    where customer.customer_id is null and customer.description is null\n\n\n), customer_transactions_overview as (\n\n    select\n      customer.customer_id,\n      customer.description as customer_description,\n      customer.created_at as customer_created_at,\n      customer.currency as customer_currency,\n      customer.`account_balance`,\n  customer.`customer_address_city`,\n  customer.`customer_address_country`,\n  customer.`customer_address_line_1`,\n  customer.`customer_address_line_2`,\n  customer.`customer_address_postal_code`,\n  customer.`customer_address_state`,\n  customer.`customer_balance`,\n  customer.`bank_account_id`,\n  customer.`default_card_id`,\n  customer.`is_delinquent`,\n  customer.`email`,\n  customer.`customer_name`,\n  customer.`phone`,\n  customer.`shipping_address_city`,\n  customer.`shipping_address_country`,\n  customer.`shipping_address_line_1`,\n  customer.`shipping_address_line_2`,\n  customer.`shipping_address_postal_code`,\n  customer.`shipping_address_state`,\n  customer.`shipping_name`,\n  customer.`shipping_phone`,\n  customer.`is_deleted`,\n      coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,\n      coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,\n      coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transaction_amount,\n      coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,\n      coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_transaction_amount,\n      coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,\n      coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    \n      coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,\n      coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,\n      coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,\n      coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,\n      coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,\n      coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,\n      coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,\n      transactions_grouped.first_sale_date,\n      transactions_grouped.most_recent_sale_date,\n      coalesce(failed_charges_by_customer.total_failed_charge_count, 0) as total_failed_charge_count,\n      coalesce(failed_charges_by_customer.total_failed_charge_amount/100, 0) as total_failed_charge_amount,\n      coalesce(failed_charges_by_customer.failed_charge_count_this_month, 0) as failed_charge_count_this_month,\n      coalesce(failed_charges_by_customer.failed_charge_amount_this_month/100, 0) as failed_charge_amount_this_month,\n      customer.source_relation\n      \n    from customer\n    left join transactions_grouped\n        on customer.customer_id = transactions_grouped.customer_id\n        and customer.source_relation = transactions_grouped.source_relation\n    left join failed_charges_by_customer \n        on customer.customer_id = failed_charges_by_customer.customer_id\n        and customer.source_relation = failed_charges_by_customer.source_relation\n)\n\nselect *\nfrom transactions_not_associated_with_customer\nunion all \nselect *\nfrom customer_transactions_overview", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__customer_overview`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:37.801849Z", "completed_at": "2024-08-13T16:33:42.173113Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:42.174103Z", "completed_at": "2024-08-13T16:33:42.174113Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 4.3741819858551025, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__price_plan", "compiled": true, "compiled_code": "\n\nwith price_plan as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__price_plan_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as is_active , \n    \n    \n    billing_scheme\n    \n as \n    \n    billing_scheme\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    nickname\n    \n as \n    \n    nickname\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    recurring_aggregate_usage\n    \n as \n    \n    recurring_aggregate_usage\n    \n, \n    \n    \n    recurring_interval\n    \n as \n    \n    recurring_interval\n    \n, \n    \n    \n    recurring_interval_count\n    \n as \n    \n    recurring_interval_count\n    \n, \n    \n    \n    recurring_usage_type\n    \n as \n    \n    recurring_usage_type\n    \n, \n    \n    \n    unit_amount\n    \n as \n    \n    unit_amount\n    \n, \n    \n    \n    unit_amount_decimal\n    \n as \n    \n    unit_amount_decimal\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from price_plan\n),\n\nfinal as (\n\n    select \n        id as price_plan_id,\n        is_active,\n        unit_amount,\n        currency,\n        recurring_interval,\n        recurring_interval_count,\n        recurring_usage_type,\n        recurring_aggregate_usage,\n        metadata,\n        nickname,\n        product_id,\n        billing_scheme,\n        cast(created as timestamp) as created_at,\n        is_deleted,\n        source_relation\n\n        \n        \n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__price_plan`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:42.184325Z", "completed_at": "2024-08-13T16:33:42.187962Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:42.188820Z", "completed_at": "2024-08-13T16:33:42.188826Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011954069137573242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__price_plan_price_plan_id__source_relation.3d189cd99d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        price_plan_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__price_plan`\n    group by price_plan_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:42.178367Z", "completed_at": "2024-08-13T16:33:42.188188Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:42.189017Z", "completed_at": "2024-08-13T16:33:42.189020Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012782812118530273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__invoice_details", "compiled": true, "compiled_code": "\n\nwith invoice as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice`  \n\n), charge as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__charge`  \n\n), invoice_line_item as (\n\n    select\n        invoice_id,\n        source_relation,\n        coalesce(count(distinct unique_invoice_line_item_id),0) as number_of_line_items,\n        coalesce(sum(quantity),0) as total_quantity\n\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice_line_item`  \n    group by 1,2\n\n), customer as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__customer`  \n\n\n\n), subscription as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__subscription`  \n\n), price_plan as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__price_plan`  \n\n\n)\n\nselect \n    invoice.invoice_id,\n    invoice.number as invoice_number,\n    invoice.created_at as invoice_created_at,\n    invoice.period_start,\n    invoice.period_end,\n    invoice.status,\n    invoice.due_date,\n    invoice.currency,\n    coalesce(invoice.amount_due,0) as amount_due,\n    coalesce(invoice.amount_paid,0) as amount_paid,\n    coalesce(invoice.subtotal,0) as subtotal,\n    coalesce(invoice.tax,0) as tax,\n    coalesce(invoice.total,0) as total,\n    coalesce(invoice.amount_remaining,0) as amount_remaining,\n    coalesce(invoice.attempt_count,0) as attempt_count,\n    invoice.description as invoice_memo,\n    invoice_line_item.number_of_line_items,\n    invoice_line_item.total_quantity,\n    charge.balance_transaction_id,\n    charge.amount as charge_amount, \n    charge.status as charge_status,\n    charge.connected_account_id, \n    charge.created_at as charge_created_at,\n    charge.is_refunded as charge_is_refunded,\n    customer.customer_id,\n    customer.description as customer_description,\n    customer.account_balance as customer_account_balance,\n    customer.currency as customer_currency,\n    customer.is_delinquent as customer_is_delinquent,\n    customer.email as customer_email,\n    \n    \n    subscription.subscription_id,\n    subscription.billing as subscription_billing,\n    subscription.start_date_at as subscription_start_date,\n    subscription.ended_at as subscription_ended_at,\n\n    \n    invoice.source_relation\n\nfrom invoice\n\nleft join invoice_line_item \n    on invoice.invoice_id = invoice_line_item.invoice_id\n    and invoice.source_relation = invoice_line_item.source_relation\n\nleft join charge \n    on invoice.charge_id = charge.charge_id\n    and invoice.invoice_id = charge.invoice_id\n    and invoice.source_relation = charge.source_relation\n\n\nleft join subscription\n    on invoice.subscription_id = subscription.subscription_id\n    and invoice.source_relation = subscription.source_relation\n\n\n\nleft join customer \n    on invoice.customer_id = customer.customer_id\n    and invoice.source_relation = customer.source_relation", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__invoice_details`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:42.198216Z", "completed_at": "2024-08-13T16:33:42.201532Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:42.202092Z", "completed_at": "2024-08-13T16:33:42.202097Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011010169982910156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__invoice_details_invoice_id__source_relation.77a5fcff44", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__invoice_details`\n    group by invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:39.469494Z", "completed_at": "2024-08-13T16:33:43.878580Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:43.883659Z", "completed_at": "2024-08-13T16:33:43.885672Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 4.4241108894348145, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.int_stripe__date_spine", "compiled": true, "compiled_code": "-- depends_on: `dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__balance_transactions`\nwith spine as (\n\n    \n\n    \n\n    \n\n    \n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 3366\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2015-05-28' as date) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n\n        datetime_add(\n            cast( cast('2024-08-13' as date) as datetime),\n        interval 1 day\n        )\n\n\n\n)\n\nselect * from filtered\n\n\n),\n\naccount as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__account`\n),\n\ndate_spine as (\n\n    select\n        cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        day\n    ) as date) as date_day, \n        cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        week\n    ) as date) as date_week, \n        cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        month\n    ) as date) as date_month,\n        cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        year\n    ) as date) as date_year,  \n        row_number() over (order by cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        day\n    ) as date)) as date_index\n    from spine\n),\n\nfinal as (\n\n    select distinct\n        account.account_id,\n        account.source_relation,\n        date_spine.date_day,\n        date_spine.date_week,\n        date_spine.date_month,\n        date_spine.date_year,\n        date_spine.date_index\n    from account \n    cross join date_spine\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stripe`.`int_stripe__date_spine`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:43.890243Z", "completed_at": "2024-08-13T16:33:43.895721Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:43.896128Z", "completed_at": "2024-08-13T16:33:43.896135Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006997823715209961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.int_stripe__account_daily", "compiled": true, "compiled_code": "with date_spine as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`int_stripe__date_spine`\n\n), balance_transaction as (\n\n    select *,\n        case \n            when balance_transaction_type = 'payout' \n            then date(\n    balance_transaction_available_on\n    \n    )  \n            else date(\n    balance_transaction_created_at\n    \n    )\n        end as date\n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__balance_transactions`\n\n), incomplete_charges as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`int_stripe__incomplete_charges`  \n\n), daily_account_balance_transactions as (\n\n    select\n        date_spine.date_day,\n        date_spine.account_id,\n        date_spine.source_relation,\n        sum(case when balance_transaction.balance_transaction_type in ('charge', 'payment') \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_sales_amount,\n        sum(case when balance_transaction.balance_transaction_type in ('payment_refund', 'refund') \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_refunds_amount,\n        sum(case when balance_transaction.balance_transaction_type = 'adjustment' \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_adjustments_amount,\n        sum(case when balance_transaction.balance_transaction_type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and balance_transaction.balance_transaction_type not like '%transfer%' \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_other_transactions_amount,\n        sum(case when balance_transaction.balance_transaction_type <> 'payout' and balance_transaction.balance_transaction_type not like '%transfer%' \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_gross_transaction_amount,\n        sum(case when balance_transaction.balance_transaction_type <> 'payout' and balance_transaction.balance_transaction_type not like '%transfer%' \n            then balance_transaction_net \n            else 0 end) as total_daily_net_transactions_amount,\n        sum(case when balance_transaction.balance_transaction_type = 'payout' or balance_transaction.balance_transaction_type like '%transfer%' \n            then balance_transaction_fee * -1.0\n            else 0 end) as total_daily_payout_fee_amount,\n        sum(case when balance_transaction.balance_transaction_type = 'payout' or balance_transaction.balance_transaction_type like '%transfer%' \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_gross_payout_amount,\n        sum(case when balance_transaction.balance_transaction_type = 'payout' or balance_transaction.balance_transaction_type like '%transfer%' \n            then balance_transaction_fee * -1.0 \n            else balance_transaction_net end) as daily_net_activity_amount,\n        sum(case when balance_transaction.balance_transaction_type in ('payment', 'charge') \n            then 1 \n            else 0 end) as total_daily_sales_count,\n        sum(case when balance_transaction.balance_transaction_type = 'payout' \n            then 1\n            else 0 end) as total_daily_payouts_count,\n        count(distinct case when balance_transaction.balance_transaction_type = 'adjustment' \n                then coalesce(balance_transaction_source_id, payout_id) \n                else null end) as total_daily_adjustments_count\n    from date_spine\n    left join balance_transaction\n        on cast(timestamp_trunc(\n        cast(balance_transaction.date as timestamp),\n        day\n    ) as date) = date_spine.date_day\n        and balance_transaction.source_relation = date_spine.source_relation\n    group by 1,2,3\n\n), daily_failed_charges as (\n\n    select\n        date(\n    created_at\n    \n    ) as date,\n        source_relation,\n        count(*) as total_daily_failed_charge_count,\n        sum(amount) as total_daily_failed_charge_amount\n    from incomplete_charges\n    group by 1,2\n)\n\nselect\n    daily_account_balance_transactions.date_day,\n    daily_account_balance_transactions.account_id,\n    daily_account_balance_transactions.source_relation,\n    coalesce(daily_account_balance_transactions.total_daily_sales_amount/100.0,0) as total_daily_sales_amount,\n    coalesce(daily_account_balance_transactions.total_daily_refunds_amount/100.0,0) as total_daily_refunds_amount,\n    coalesce(daily_account_balance_transactions.total_daily_adjustments_amount/100.0,0) as total_daily_adjustments_amount,\n    coalesce(daily_account_balance_transactions.total_daily_other_transactions_amount/100.0,0) as total_daily_other_transactions_amount,\n    coalesce(daily_account_balance_transactions.total_daily_gross_transaction_amount/100.0,0) as total_daily_gross_transaction_amount,\n    coalesce(daily_account_balance_transactions.total_daily_net_transactions_amount/100.0,0) as total_daily_net_transactions_amount,\n    coalesce(daily_account_balance_transactions.total_daily_payout_fee_amount/100.0,0) as total_daily_payout_fee_amount,\n    coalesce(daily_account_balance_transactions.total_daily_gross_payout_amount/100.0,0) as total_daily_gross_payout_amount,\n    coalesce(daily_account_balance_transactions.daily_net_activity_amount/100.0,0) as daily_net_activity_amount,\n    coalesce((daily_account_balance_transactions.daily_net_activity_amount + daily_account_balance_transactions.total_daily_gross_payout_amount)/100.0, 0) as daily_end_balance_amount,\n    coalesce(daily_account_balance_transactions.total_daily_sales_count, 0) as total_daily_sales_count,\n    coalesce(daily_account_balance_transactions.total_daily_payouts_count, 0) as total_daily_payouts_count,\n    coalesce(daily_account_balance_transactions.total_daily_adjustments_count, 0) as total_daily_adjustments_count,\n    coalesce(daily_failed_charges.total_daily_failed_charge_count, 0) as total_daily_failed_charge_count,\n    coalesce(daily_failed_charges.total_daily_failed_charge_amount/100, 0) as total_daily_failed_charge_amount\n\nfrom daily_account_balance_transactions\nleft join daily_failed_charges\n    on daily_account_balance_transactions.date_day = daily_failed_charges.date\n    and daily_account_balance_transactions.source_relation = daily_failed_charges.source_relation", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stripe`.`int_stripe__account_daily`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:43.897741Z", "completed_at": "2024-08-13T16:33:43.903146Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:43.903983Z", "completed_at": "2024-08-13T16:33:43.903988Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00718998908996582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.int_stripe__account_rolling_totals", "compiled": true, "compiled_code": "\n\n\nwith date_spine as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`int_stripe__date_spine`\n\n), account_daily_balances_by_type as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`int_stripe__account_daily`\n\n), account_rolling_totals as (\n\n    select\n        *\n\n        \n        , sum(total_daily_sales_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_sales_amount\n        \n        , sum(total_daily_refunds_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_refunds_amount\n        \n        , sum(total_daily_adjustments_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_adjustments_amount\n        \n        , sum(total_daily_other_transactions_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_other_transactions_amount\n        \n        , sum(total_daily_gross_transaction_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_gross_transaction_amount\n        \n        , sum(total_daily_net_transactions_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_net_transactions_amount\n        \n        , sum(total_daily_payout_fee_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_payout_fee_amount\n        \n        , sum(total_daily_gross_payout_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_gross_payout_amount\n        \n        , sum(daily_net_activity_amount) over (order by date_day rows unbounded preceding) as rolling_daily_net_activity_amount\n        \n        , sum(daily_end_balance_amount) over (order by date_day rows unbounded preceding) as rolling_daily_end_balance_amount\n        \n        , sum(total_daily_sales_count) over (order by date_day rows unbounded preceding) as rolling_total_daily_sales_count\n        \n        , sum(total_daily_payouts_count) over (order by date_day rows unbounded preceding) as rolling_total_daily_payouts_count\n        \n        , sum(total_daily_adjustments_count) over (order by date_day rows unbounded preceding) as rolling_total_daily_adjustments_count\n        \n        , sum(total_daily_failed_charge_count) over (order by date_day rows unbounded preceding) as rolling_total_daily_failed_charge_count\n        \n        , sum(total_daily_failed_charge_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_failed_charge_amount\n        \n\n    from account_daily_balances_by_type\n\n), final as (\n\n    select\n        date_spine.account_id,\n        date_spine.date_day,\n        date_spine.date_week,\n        date_spine.date_month,\n        date_spine.date_year,\n        \n        coalesce(round(account_rolling_totals.total_daily_sales_amount,2),0) as total_daily_sales_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_refunds_amount,2),0) as total_daily_refunds_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_adjustments_amount,2),0) as total_daily_adjustments_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_other_transactions_amount,2),0) as total_daily_other_transactions_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_gross_transaction_amount,2),0) as total_daily_gross_transaction_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_net_transactions_amount,2),0) as total_daily_net_transactions_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_payout_fee_amount,2),0) as total_daily_payout_fee_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_gross_payout_amount,2),0) as total_daily_gross_payout_amount,\n        \n        coalesce(round(account_rolling_totals.daily_net_activity_amount,2),0) as daily_net_activity_amount,\n        \n        coalesce(round(account_rolling_totals.daily_end_balance_amount,2),0) as daily_end_balance_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_sales_count,2),0) as total_daily_sales_count,\n        \n        coalesce(round(account_rolling_totals.total_daily_payouts_count,2),0) as total_daily_payouts_count,\n        \n        coalesce(round(account_rolling_totals.total_daily_adjustments_count,2),0) as total_daily_adjustments_count,\n        \n        coalesce(round(account_rolling_totals.total_daily_failed_charge_count,2),0) as total_daily_failed_charge_count,\n        \n        coalesce(round(account_rolling_totals.total_daily_failed_charge_amount,2),0) as total_daily_failed_charge_amount,\n        \n\n        \n        case when account_rolling_totals.rolling_total_daily_sales_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_sales_amount,2),0)\n            end as rolling_total_daily_sales_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_refunds_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_refunds_amount,2),0)\n            end as rolling_total_daily_refunds_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_adjustments_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_adjustments_amount,2),0)\n            end as rolling_total_daily_adjustments_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_other_transactions_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_other_transactions_amount,2),0)\n            end as rolling_total_daily_other_transactions_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_gross_transaction_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_gross_transaction_amount,2),0)\n            end as rolling_total_daily_gross_transaction_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_net_transactions_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_net_transactions_amount,2),0)\n            end as rolling_total_daily_net_transactions_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_payout_fee_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_payout_fee_amount,2),0)\n            end as rolling_total_daily_payout_fee_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_gross_payout_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_gross_payout_amount,2),0)\n            end as rolling_total_daily_gross_payout_amount,\n        \n        case when account_rolling_totals.rolling_daily_net_activity_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_daily_net_activity_amount,2),0)\n            end as rolling_daily_net_activity_amount,\n        \n        case when account_rolling_totals.rolling_daily_end_balance_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_daily_end_balance_amount,2),0)\n            end as rolling_daily_end_balance_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_sales_count is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_sales_count,2),0)\n            end as rolling_total_daily_sales_count,\n        \n        case when account_rolling_totals.rolling_total_daily_payouts_count is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_payouts_count,2),0)\n            end as rolling_total_daily_payouts_count,\n        \n        case when account_rolling_totals.rolling_total_daily_adjustments_count is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_adjustments_count,2),0)\n            end as rolling_total_daily_adjustments_count,\n        \n        case when account_rolling_totals.rolling_total_daily_failed_charge_count is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_failed_charge_count,2),0)\n            end as rolling_total_daily_failed_charge_count,\n        \n        case when account_rolling_totals.rolling_total_daily_failed_charge_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_failed_charge_amount,2),0)\n            end as rolling_total_daily_failed_charge_amount,\n        \n\n        date_spine.date_index,\n        account_rolling_totals.source_relation\n\n    from date_spine\n    left join account_rolling_totals\n        on account_rolling_totals.date_day = date_spine.date_day\n        and account_rolling_totals.account_id = date_spine.account_id\n        and account_rolling_totals.source_relation = date_spine.source_relation\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stripe`.`int_stripe__account_rolling_totals`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:43.905522Z", "completed_at": "2024-08-13T16:33:43.911841Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:43.912360Z", "completed_at": "2024-08-13T16:33:43.912366Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0076961517333984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.int_stripe__account_partitions", "compiled": true, "compiled_code": "\n\nwith account_rolling_totals as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`int_stripe__account_rolling_totals`\n),\n\nfinal as (\n\n    select\n        *,\n        \n        sum(case when rolling_total_daily_sales_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_sales_amount_partition,\n        sum(case when rolling_total_daily_refunds_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_refunds_amount_partition,\n        sum(case when rolling_total_daily_adjustments_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_adjustments_amount_partition,\n        sum(case when rolling_total_daily_other_transactions_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_other_transactions_amount_partition,\n        sum(case when rolling_total_daily_gross_transaction_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_gross_transaction_amount_partition,\n        sum(case when rolling_total_daily_net_transactions_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_net_transactions_amount_partition,\n        sum(case when rolling_total_daily_payout_fee_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_payout_fee_amount_partition,\n        sum(case when rolling_total_daily_gross_payout_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_gross_payout_amount_partition,\n        sum(case when rolling_daily_net_activity_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_daily_net_activity_amount_partition,\n        sum(case when rolling_daily_end_balance_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_daily_end_balance_amount_partition,\n        sum(case when rolling_total_daily_sales_count is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_sales_count_partition,\n        sum(case when rolling_total_daily_payouts_count is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_payouts_count_partition,\n        sum(case when rolling_total_daily_adjustments_count is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_adjustments_count_partition,\n        sum(case when rolling_total_daily_failed_charge_count is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_failed_charge_count_partition,\n        sum(case when rolling_total_daily_failed_charge_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_failed_charge_amount_partition                  \n    from account_rolling_totals\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stripe`.`int_stripe__account_partitions`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:43.913867Z", "completed_at": "2024-08-13T16:33:43.924437Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:43.924962Z", "completed_at": "2024-08-13T16:33:43.924970Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011990070343017578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__daily_overview", "compiled": true, "compiled_code": "\n\nwith account_partitions as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`int_stripe__account_partitions`\n),\n\nfinal as (\n\n    select\n        account_id,\n        to_hex(md5(cast(coalesce(cast(account_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(date_day as string), '_dbt_utils_surrogate_key_null_') as string))) as account_daily_id,\n\n        date_day,        \n        date_week,\n        date_month, \n        date_year,  \n        date_index,\n        source_relation,\n        coalesce(total_daily_sales_amount,0) as total_daily_sales_amount,\n        coalesce(total_daily_refunds_amount,0) as total_daily_refunds_amount,\n        coalesce(total_daily_adjustments_amount,0) as total_daily_adjustments_amount,\n        coalesce(total_daily_other_transactions_amount,0) as total_daily_other_transactions_amount,\n        coalesce(total_daily_gross_transaction_amount,0) as total_daily_gross_transaction_amount,\n        coalesce(total_daily_net_transactions_amount,0) as total_daily_net_transactions_amount,\n        coalesce(total_daily_payout_fee_amount,0) as total_daily_payout_fee_amount,\n        coalesce(total_daily_gross_payout_amount,0) as total_daily_gross_payout_amount,\n        coalesce(daily_net_activity_amount,0) as daily_net_activity_amount,\n        coalesce(daily_end_balance_amount,0) as daily_end_balance_amount,\n        coalesce(total_daily_sales_count,0) as total_daily_sales_count,\n        coalesce(total_daily_payouts_count,0) as total_daily_payouts_count,\n        coalesce(total_daily_adjustments_count,0) as total_daily_adjustments_count,\n        coalesce(total_daily_failed_charge_count,0) as total_daily_failed_charge_count,\n        coalesce(total_daily_failed_charge_amount,0) as total_daily_failed_charge_amount,\n        \n        coalesce(rolling_total_daily_sales_amount,   \n            first_value(rolling_total_daily_sales_amount) over (partition by rolling_total_daily_sales_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_sales_amount,\n        coalesce(rolling_total_daily_refunds_amount,   \n            first_value(rolling_total_daily_refunds_amount) over (partition by rolling_total_daily_refunds_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_refunds_amount,\n        coalesce(rolling_total_daily_adjustments_amount,   \n            first_value(rolling_total_daily_adjustments_amount) over (partition by rolling_total_daily_adjustments_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_adjustments_amount,\n        coalesce(rolling_total_daily_other_transactions_amount,   \n            first_value(rolling_total_daily_other_transactions_amount) over (partition by rolling_total_daily_other_transactions_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_other_transactions_amount,\n        coalesce(rolling_total_daily_gross_transaction_amount,   \n            first_value(rolling_total_daily_gross_transaction_amount) over (partition by rolling_total_daily_gross_transaction_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_gross_transaction_amount,\n        coalesce(rolling_total_daily_net_transactions_amount,   \n            first_value(rolling_total_daily_net_transactions_amount) over (partition by rolling_total_daily_net_transactions_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_net_transactions_amount,\n        coalesce(rolling_total_daily_payout_fee_amount,   \n            first_value(rolling_total_daily_payout_fee_amount) over (partition by rolling_total_daily_payout_fee_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_payout_fee_amount,\n        coalesce(rolling_total_daily_gross_payout_amount,   \n            first_value(rolling_total_daily_gross_payout_amount) over (partition by rolling_total_daily_gross_payout_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_gross_payout_amount,\n        coalesce(rolling_daily_net_activity_amount,   \n            first_value(rolling_daily_net_activity_amount) over (partition by rolling_daily_net_activity_amount_partition order by date_day rows unbounded preceding)) as rolling_daily_net_activity_amount,\n        coalesce(rolling_daily_end_balance_amount,   \n            first_value(rolling_daily_end_balance_amount) over (partition by rolling_daily_end_balance_amount_partition order by date_day rows unbounded preceding)) as rolling_daily_end_balance_amount,\n        coalesce(rolling_total_daily_sales_count,   \n            first_value(rolling_total_daily_sales_count) over (partition by rolling_total_daily_sales_count_partition order by date_day rows unbounded preceding)) as rolling_total_daily_sales_count,\n        coalesce(rolling_total_daily_payouts_count,   \n            first_value(rolling_total_daily_payouts_count) over (partition by rolling_total_daily_payouts_count_partition order by date_day rows unbounded preceding)) as rolling_total_daily_payouts_count,\n        coalesce(rolling_total_daily_adjustments_count,   \n            first_value(rolling_total_daily_adjustments_count) over (partition by rolling_total_daily_adjustments_count_partition order by date_day rows unbounded preceding)) as rolling_total_daily_adjustments_count,\n        coalesce(rolling_total_daily_failed_charge_count,   \n            first_value(rolling_total_daily_failed_charge_count) over (partition by rolling_total_daily_failed_charge_count_partition order by date_day rows unbounded preceding)) as rolling_total_daily_failed_charge_count,\n        coalesce(rolling_total_daily_failed_charge_amount,   \n            first_value(rolling_total_daily_failed_charge_amount) over (partition by rolling_total_daily_failed_charge_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_failed_charge_amount\n\n    from account_partitions\n)    \n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__daily_overview`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:43.926526Z", "completed_at": "2024-08-13T16:33:43.932979Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:43.933640Z", "completed_at": "2024-08-13T16:33:43.933647Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008035659790039062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__daily_overview_account_id__date_day__source_relation.81c846ac71", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, date_day, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__daily_overview`\n    group by account_id, date_day, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:42.193212Z", "completed_at": "2024-08-13T16:33:46.802214Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:46.803804Z", "completed_at": "2024-08-13T16:33:46.803826Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 4.615228891372681, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__invoice_line_item_details", "compiled": true, "compiled_code": "\n\nwith invoice_line_item as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice_line_item` \n\n), invoice_details as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__invoice_details`\n\n\n), subscription as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__subscription`  \n\n), price_plan as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__price_plan`  \n\n\n)\n\nselect \n    invoice_line_item.invoice_line_item_id,\n    invoice_line_item.invoice_id,\n    invoice_line_item.invoice_item_id,\n    coalesce(invoice_line_item.amount,0) as invoice_line_item_amount,\n    invoice_line_item.currency,\n    invoice_line_item.description as invoice_line_item_memo,\n    invoice_line_item.is_discountable,\n    invoice_line_item.plan_id,\n    invoice_line_item.price_id,\n    invoice_line_item.proration,\n    invoice_line_item.quantity,\n    invoice_line_item.subscription_id,\n    invoice_line_item.subscription_item_id,\n    invoice_line_item.type,\n    invoice_line_item.unique_invoice_line_item_id,\n    invoice_line_item.period_start,\n    invoice_line_item.period_end,\n    invoice_details.invoice_created_at,\n    invoice_details.status as invoice_status,\n    invoice_details.due_date as invoice_due_date,\n    coalesce(invoice_details.amount_due,0) as invoice_amount_due,\n    coalesce(invoice_details.amount_paid,0) as invoice_amount_paid,\n    coalesce(invoice_details.subtotal,0) as invoice_subtotal,\n    coalesce(invoice_details.tax,0) as invoice_tax,\n    coalesce(invoice_details.total,0) as invoice_total,\n    invoice_details.connected_account_id as connected_account_id,\n    invoice_details.customer_id as customer_id,\n\n    \n\n    subscription.billing as subscription_billing,\n    subscription.start_date_at as subscription_start_date,\n    subscription.ended_at as subscription_ended_at,\n    price_plan.is_active as price_plan_is_active,\n    price_plan.unit_amount as price_plan_amount,\n    price_plan.recurring_interval as price_plan_interval,\n    price_plan.recurring_interval_count as price_plan_interval_count,\n    price_plan.nickname as price_plan_nickname,\n    price_plan.product_id as price_plan_product_id,\n    \n\n    invoice_line_item.source_relation\n    \nfrom invoice_line_item\n\nleft join invoice_details \n    on invoice_line_item.invoice_id = invoice_details.invoice_id\n    and invoice_line_item.source_relation = invoice_details.source_relation\n\n\n\nleft join subscription\n    on invoice_line_item.subscription_id = subscription.subscription_id\n    and invoice_line_item.source_relation = subscription.source_relation\n\nleft join price_plan\n\n\n    on invoice_line_item.price_id = price_plan.price_plan_id\n\n\n    and invoice_line_item.source_relation = price_plan.source_relation\n\n", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__invoice_line_item_details`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:33:46.810468Z", "completed_at": "2024-08-13T16:33:46.819592Z"}, {"name": "execute", "started_at": "2024-08-13T16:33:46.820256Z", "completed_at": "2024-08-13T16:33:46.820262Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011652231216430664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__invoice_line_item_details_invoice_line_item_id__invoice_id__source_relation.c9a57418fb", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_line_item_id, invoice_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stripe`.`stripe__invoice_line_item_details`\n    group by invoice_line_item_id, invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}], "elapsed_time": 21.39482617378235, "args": {"warn_error_options": {"include": [], "exclude": []}, "enable_legacy_logger": false, "static": false, "printer_width": 80, "indirect_selection": "eager", "log_path": "/Users/renee/Documents/dbt/stripe/develop/logs", "send_anonymous_usage_stats": true, "log_level_file": "debug", "write_json": true, "use_colors_file": true, "partial_parse": true, "log_level": "info", "static_parser": true, "profiles_dir": "/Users/renee/.dbt", "print": true, "strict_mode": false, "cache_selected_only": false, "which": "generate", "log_format_file": "debug", "invocation_command": "dbt docs generate", "show_resource_report": false, "vars": {}, "select": [], "partial_parse_file_diff": true, "log_format": "default", "exclude": [], "empty_catalog": false, "version_check": true, "introspect": true, "compile": true, "defer": false, "project_dir": "/Users/renee/Documents/dbt/stripe/develop", "log_file_max_bytes": 10485760, "use_colors": true, "populate_cache": true, "quiet": false, "macro_debugging": false, "favor_state": false}}