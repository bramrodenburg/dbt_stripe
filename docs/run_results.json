{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.17", "generated_at": "2024-08-06T05:17:40.762470Z", "invocation_id": "46fddde5-1312-409e-a58e-ebc4ab657d65", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.187230Z", "completed_at": "2024-08-06T05:17:38.262462Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.264641Z", "completed_at": "2024-08-06T05:17:38.264662Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.16459321975708008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__card_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"stripe_integrations_tests_14\".\"card_data\"", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__card_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.105793Z", "completed_at": "2024-08-06T05:17:38.262833Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.264926Z", "completed_at": "2024-08-06T05:17:38.264930Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.16607189178466797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__account_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"stripe_integrations_tests_14\".\"account_data\"", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__account_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.126055Z", "completed_at": "2024-08-06T05:17:38.263181Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.265418Z", "completed_at": "2024-08-06T05:17:38.265421Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.16637492179870605, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__balance_transaction_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"stripe_integrations_tests_14\".\"balance_transaction_data\"", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__balance_transaction_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.199758Z", "completed_at": "2024-08-06T05:17:38.264116Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.266761Z", "completed_at": "2024-08-06T05:17:38.266765Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.16565299034118652, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__charge_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"stripe_integrations_tests_14\".\"charge_data\"", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__charge_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.272092Z", "completed_at": "2024-08-06T05:17:38.334644Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.336402Z", "completed_at": "2024-08-06T05:17:38.336409Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06838393211364746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__customer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"stripe_integrations_tests_14\".\"customer_data\"", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__customer_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.326654Z", "completed_at": "2024-08-06T05:17:38.335040Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.336675Z", "completed_at": "2024-08-06T05:17:38.336678Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06844377517700195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__discount_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"stripe_integrations_tests_14\".\"discount_data\"", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__discount_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.329347Z", "completed_at": "2024-08-06T05:17:38.335868Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.338444Z", "completed_at": "2024-08-06T05:17:38.338448Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.06947827339172363, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__dispute_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"stripe_integrations_tests_14\".\"dispute_data\"", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__dispute_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.332126Z", "completed_at": "2024-08-06T05:17:38.336124Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.338719Z", "completed_at": "2024-08-06T05:17:38.338724Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0689082145690918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__fee_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"stripe_integrations_tests_14\".\"fee_data\"", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__fee_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.343126Z", "completed_at": "2024-08-06T05:17:38.353250Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.357528Z", "completed_at": "2024-08-06T05:17:38.357536Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018243074417114258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__invoice_line_item_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"stripe_integrations_tests_14\".\"invoice_line_item_data\"", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__invoice_line_item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.346262Z", "completed_at": "2024-08-06T05:17:38.353506Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.358146Z", "completed_at": "2024-08-06T05:17:38.358150Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0186307430267334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__invoice_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"stripe_integrations_tests_14\".\"invoice_data\"", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__invoice_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.350853Z", "completed_at": "2024-08-06T05:17:38.357811Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.360441Z", "completed_at": "2024-08-06T05:17:38.360444Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.019453048706054688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_intent_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"stripe_integrations_tests_14\".\"payment_intent_data\"", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payment_intent_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.353813Z", "completed_at": "2024-08-06T05:17:38.358402Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.361086Z", "completed_at": "2024-08-06T05:17:38.361089Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019939899444580078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_method_card_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"stripe_integrations_tests_14\".\"payment_method_card_data\"", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payment_method_card_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.364230Z", "completed_at": "2024-08-06T05:17:38.373134Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.389398Z", "completed_at": "2024-08-06T05:17:38.389408Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02942681312561035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_method_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"stripe_integrations_tests_14\".\"payment_method_data\"", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payment_method_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.367602Z", "completed_at": "2024-08-06T05:17:38.379485Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.389838Z", "completed_at": "2024-08-06T05:17:38.389842Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.029489994049072266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payout_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"stripe_integrations_tests_14\".\"payout_data\"", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payout_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.373749Z", "completed_at": "2024-08-06T05:17:38.390167Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.393212Z", "completed_at": "2024-08-06T05:17:38.393216Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02783799171447754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__price_plan_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"stripe_integrations_tests_14\".\"price_data\"", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__price_plan_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.385717Z", "completed_at": "2024-08-06T05:17:38.391176Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.393927Z", "completed_at": "2024-08-06T05:17:38.393931Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02379918098449707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__product_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"stripe_integrations_tests_14\".\"product_data\"", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__product_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.397049Z", "completed_at": "2024-08-06T05:17:38.409393Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.416055Z", "completed_at": "2024-08-06T05:17:38.416065Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02532029151916504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__refund_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"stripe_integrations_tests_14\".\"refund_data\"", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__refund_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.412827Z", "completed_at": "2024-08-06T05:17:38.413906Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.416413Z", "completed_at": "2024-08-06T05:17:38.416416Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011205911636352539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.account_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.400572Z", "completed_at": "2024-08-06T05:17:38.414229Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.416694Z", "completed_at": "2024-08-06T05:17:38.416697Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02571702003479004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__subscription_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"stripe_integrations_tests_14\".\"subscription_history_data\"", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__subscription_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.409821Z", "completed_at": "2024-08-06T05:17:38.415759Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.420276Z", "completed_at": "2024-08-06T05:17:38.420282Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014574766159057617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__transfer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"stripe_integrations_tests_14\".\"transfer_data\"", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__transfer_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.425586Z", "completed_at": "2024-08-06T05:17:38.426846Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.432349Z", "completed_at": "2024-08-06T05:17:38.432355Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011018037796020508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.balance_transaction_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.427211Z", "completed_at": "2024-08-06T05:17:38.428170Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.432638Z", "completed_at": "2024-08-06T05:17:38.432640Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01105499267578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.card_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.428486Z", "completed_at": "2024-08-06T05:17:38.429605Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.432902Z", "completed_at": "2024-08-06T05:17:38.432905Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011105060577392578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.charge_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.431040Z", "completed_at": "2024-08-06T05:17:38.432045Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.434851Z", "completed_at": "2024-08-06T05:17:38.434854Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010907888412475586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.credit_note_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.439009Z", "completed_at": "2024-08-06T05:17:38.440094Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.445492Z", "completed_at": "2024-08-06T05:17:38.445497Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01026296615600586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.credit_note_line_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.440374Z", "completed_at": "2024-08-06T05:17:38.442147Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.445735Z", "completed_at": "2024-08-06T05:17:38.445737Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010369062423706055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.customer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.442416Z", "completed_at": "2024-08-06T05:17:38.443276Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.445977Z", "completed_at": "2024-08-06T05:17:38.445980Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010381221771240234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.discount_data_postgres", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.444367Z", "completed_at": "2024-08-06T05:17:38.445243Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.447989Z", "completed_at": "2024-08-06T05:17:38.447992Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010805368423461914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.dispute_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.452499Z", "completed_at": "2024-08-06T05:17:38.453554Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.459195Z", "completed_at": "2024-08-06T05:17:38.459201Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010772943496704102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.fee_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.453854Z", "completed_at": "2024-08-06T05:17:38.454775Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.459447Z", "completed_at": "2024-08-06T05:17:38.459450Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010943174362182617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.invoice_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.455067Z", "completed_at": "2024-08-06T05:17:38.455973Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.459745Z", "completed_at": "2024-08-06T05:17:38.459750Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010965824127197266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.invoice_line_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.457083Z", "completed_at": "2024-08-06T05:17:38.458898Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.462071Z", "completed_at": "2024-08-06T05:17:38.462076Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01154017448425293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.payment_intent_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.466884Z", "completed_at": "2024-08-06T05:17:38.468224Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.473406Z", "completed_at": "2024-08-06T05:17:38.473413Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01049494743347168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.payment_method_card_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.468589Z", "completed_at": "2024-08-06T05:17:38.469572Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.473662Z", "completed_at": "2024-08-06T05:17:38.473665Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010616064071655273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.payment_method_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.469873Z", "completed_at": "2024-08-06T05:17:38.470810Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.473914Z", "completed_at": "2024-08-06T05:17:38.473917Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010792016983032227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.payout_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.472130Z", "completed_at": "2024-08-06T05:17:38.473120Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.475982Z", "completed_at": "2024-08-06T05:17:38.475986Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010857105255126953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.plan_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.480082Z", "completed_at": "2024-08-06T05:17:38.482227Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.486984Z", "completed_at": "2024-08-06T05:17:38.486989Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010461091995239258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.price_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.482569Z", "completed_at": "2024-08-06T05:17:38.483476Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.487220Z", "completed_at": "2024-08-06T05:17:38.487222Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010502815246582031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.product_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.483765Z", "completed_at": "2024-08-06T05:17:38.484666Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.487461Z", "completed_at": "2024-08-06T05:17:38.487464Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010579824447631836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.refund_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.485806Z", "completed_at": "2024-08-06T05:17:38.486711Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.489254Z", "completed_at": "2024-08-06T05:17:38.489257Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010671854019165039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.subscription_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.492896Z", "completed_at": "2024-08-06T05:17:38.493953Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.507606Z", "completed_at": "2024-08-06T05:17:38.507613Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01807093620300293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.subscription_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.494228Z", "completed_at": "2024-08-06T05:17:38.495137Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.507880Z", "completed_at": "2024-08-06T05:17:38.507883Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01819300651550293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.transfer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.503404Z", "completed_at": "2024-08-06T05:17:38.832532Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.833148Z", "completed_at": "2024-08-06T05:17:38.833159Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.36387014389038086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__account", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__account_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    business_profile_name\n    \n as \n    \n    business_profile_name\n    \n, \n    \n    \n    business_profile_mcc\n    \n as \n    \n    business_profile_mcc\n    \n, \n    \n    \n    business_type\n    \n as \n    \n    business_type\n    \n, \n    \n    \n    charges_enabled\n    \n as \n    \n    charges_enabled\n    \n, \n    \n    \n    company_address_city\n    \n as \n    \n    company_address_city\n    \n, \n    \n    \n    company_address_country\n    \n as \n    \n    company_address_country\n    \n, \n    \n    \n    company_address_line_1\n    \n as \n    \n    company_address_line_1\n    \n, \n    \n    \n    company_address_line_2\n    \n as \n    \n    company_address_line_2\n    \n, \n    \n    \n    company_address_postal_code\n    \n as \n    \n    company_address_postal_code\n    \n, \n    \n    \n    company_address_state\n    \n as \n    \n    company_address_state\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    company_phone\n    \n as \n    \n    company_phone\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    default_currency\n    \n as \n    \n    default_currency\n    \n, \n    \n    \n    details_submitted\n    \n as \n    \n    details_submitted\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    payouts_enabled\n    \n as \n    \n    payouts_enabled\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as account_id,\n        business_profile_mcc,\n        business_profile_name,\n        business_type,\n        charges_enabled,\n        company_address_city,\n        company_address_country,\n        company_address_line_1,\n        company_address_line_2,\n        company_address_postal_code,\n        company_address_state,\n        company_name,\n        company_phone,\n        country,\n        cast(created as timestamp) as created_at,\n        default_currency,\n        email,\n        is_deleted,\n        metadata,\n        payouts_enabled as is_payouts_enabled,\n        type as account_type,\n        source_relation\n\n        \n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__account\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.516376Z", "completed_at": "2024-08-06T05:17:38.833897Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.835959Z", "completed_at": "2024-08-06T05:17:38.835965Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3534820079803467, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__charge", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__charge_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_refunded\n    \n as \n    \n    amount_refunded\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    application_fee_amount\n    \n as \n    \n    application_fee_amount\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    bank_account_id\n    \n as \n    \n    bank_account_id\n    \n, \n    \n    \n    calculated_statement_descriptor\n    \n as \n    \n    calculated_statement_descriptor\n    \n, \n    \n    \n    captured\n    \n as \n    \n    captured\n    \n, \n    \n    \n    card_id\n    \n as \n    \n    card_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    destination\n    \n as \n    \n    destination\n    \n, \n    \n    \n    failure_code\n    \n as \n    \n    failure_code\n    \n, \n    \n    \n    failure_message\n    \n as \n    \n    failure_message\n    \n, \n    \n    \n    fraud_details_stripe_report\n    \n as \n    \n    fraud_details_stripe_report\n    \n, \n    \n    \n    fraud_details_user_report\n    \n as \n    \n    fraud_details_user_report\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    on_behalf_of\n    \n as \n    \n    on_behalf_of\n    \n, \n    \n    \n    outcome_network_status\n    \n as \n    \n    outcome_network_status\n    \n, \n    \n    \n    outcome_reason\n    \n as \n    \n    outcome_reason\n    \n, \n    \n    \n    outcome_risk_level\n    \n as \n    \n    outcome_risk_level\n    \n, \n    \n    \n    outcome_risk_score\n    \n as \n    \n    outcome_risk_score\n    \n, \n    \n    \n    outcome_seller_message\n    \n as \n    \n    outcome_seller_message\n    \n, \n    \n    \n    outcome_type\n    \n as \n    \n    outcome_type\n    \n, \n    \n    \n    paid\n    \n as \n    \n    paid\n    \n, \n    \n    \n    payment_intent_id\n    \n as \n    \n    payment_intent_id\n    \n, \n    cast(null as TEXT) as \n    \n    payment_method_id\n    \n , \n    \n    \n    receipt_email\n    \n as \n    \n    receipt_email\n    \n, \n    \n    \n    receipt_number\n    \n as \n    \n    receipt_number\n    \n, \n    \n    \n    receipt_url\n    \n as \n    \n    receipt_url\n    \n, \n    \n    \n    refunded\n    \n as \n    \n    refunded\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_line_1\n    \n as \n    \n    shipping_address_line_1\n    \n, \n    \n    \n    shipping_address_line_2\n    \n as \n    \n    shipping_address_line_2\n    \n, \n    \n    \n    shipping_address_postal_code\n    \n as \n    \n    shipping_address_postal_code\n    \n, \n    \n    \n    shipping_address_state\n    \n as \n    \n    shipping_address_state\n    \n, \n    \n    \n    shipping_carrier\n    \n as \n    \n    shipping_carrier\n    \n, \n    \n    \n    shipping_name\n    \n as \n    \n    shipping_name\n    \n, \n    \n    \n    shipping_phone\n    \n as \n    \n    shipping_phone\n    \n, \n    \n    \n    shipping_tracking_number\n    \n as \n    \n    shipping_tracking_number\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    source_transfer\n    \n as \n    \n    source_transfer\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    transfer_data_destination\n    \n as \n    \n    transfer_data_destination\n    \n, \n    \n    \n    transfer_group\n    \n as \n    \n    transfer_group\n    \n, \n    \n    \n    transfer_id\n    \n as \n    \n    transfer_id\n    \n, \n    cast(null as TEXT) as \n    \n    billing_detail_address_city\n    \n , \n    cast(null as TEXT) as \n    \n    billing_detail_address_country\n    \n , \n    cast(null as TEXT) as \n    \n    billing_detail_address_line1\n    \n , \n    cast(null as TEXT) as \n    \n    billing_detail_address_line2\n    \n , \n    cast(null as TEXT) as \n    \n    billing_detail_address_postal_code\n    \n , \n    cast(null as TEXT) as \n    \n    billing_detail_address_state\n    \n , \n    cast(null as TEXT) as \n    \n    billing_detail_email\n    \n , \n    cast(null as TEXT) as \n    \n    billing_detail_name\n    \n , \n    cast(null as TEXT) as \n    \n    billing_detail_phone\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select \n        id as charge_id, \n        amount,\n        amount_refunded,\n        application_fee_amount,\n        balance_transaction_id,\n        captured as is_captured,\n        card_id,\n        cast(created as timestamp) as created_at,\n        connected_account_id,\n        customer_id,\n        currency,\n        description,\n        failure_code,\n        failure_message,\n        metadata,\n        paid as is_paid,\n        payment_intent_id,\n        payment_method_id,\n        receipt_email,\n        receipt_number,\n        refunded as is_refunded,\n        status,\n        shipping_address_city,\n        shipping_address_country,\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_postal_code,\n        shipping_address_state,\n        shipping_carrier,\n        shipping_name,\n        shipping_phone,\n        shipping_tracking_number,\n        source_id,\n        source_transfer,\n        statement_descriptor,\n        invoice_id,\n        calculated_statement_descriptor,\n        billing_detail_address_city,\n        billing_detail_address_country,\n        billing_detail_address_line1,\n        billing_detail_address_line2,\n        billing_detail_address_postal_code,\n        billing_detail_address_state,\n        billing_detail_email,\n        billing_detail_name,\n        billing_detail_phone,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__charge\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.511786Z", "completed_at": "2024-08-06T05:17:38.834628Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.836639Z", "completed_at": "2024-08-06T05:17:38.836643Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3544948101043701, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__balance_transaction", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__balance_transaction_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    available_on\n    \n as \n    \n    available_on\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    fee\n    \n as \n    \n    fee\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    net\n    \n as \n    \n    net\n    \n, \n    \n    \n    payout_id\n    \n as \n    \n    payout_id\n    \n, \n    cast(null as TEXT) as \n    \n    reporting_category\n    \n , \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as balance_transaction_id,\n        amount,\n        cast(available_on as timestamp) as available_on,\n        cast(created as timestamp) as created_at,\n        connected_account_id,\n        currency,\n        description,\n        exchange_rate,\n        fee,\n        net,\n        reporting_category,\n        source,\n        status,\n        type,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__balance_transaction\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.495423Z", "completed_at": "2024-08-06T05:17:38.834208Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:38.836288Z", "completed_at": "2024-08-06T05:17:38.836296Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.374161958694458, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__card", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__card_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    address_city\n    \n as \n    \n    address_city\n    \n, \n    \n    \n    address_country\n    \n as \n    \n    address_country\n    \n, \n    \n    \n    address_line_1\n    \n as \n    \n    address_line_1\n    \n, \n    \n    \n    address_line_1_check\n    \n as \n    \n    address_line_1_check\n    \n, \n    \n    \n    address_line_2\n    \n as \n    \n    address_line_2\n    \n, \n    \n    \n    address_state\n    \n as \n    \n    address_state\n    \n, \n    \n    \n    address_zip\n    \n as \n    \n    address_zip\n    \n, \n    \n    \n    address_zip_check\n    \n as \n    \n    address_zip_check\n    \n, \n    \n    \n    brand\n    \n as \n    \n    brand\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    cvc_check\n    \n as \n    \n    cvc_check\n    \n, \n    \n    \n    dynamic_last_4\n    \n as \n    \n    dynamic_last_4\n    \n, \n    \n    \n    exp_month\n    \n as \n    \n    exp_month\n    \n, \n    \n    \n    exp_year\n    \n as \n    \n    exp_year\n    \n, \n    \n    \n    fingerprint\n    \n as \n    \n    fingerprint\n    \n, \n    \n    \n    funding\n    \n as \n    \n    funding\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    last_4\n    \n as \n    \n    last_4\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    network\n    \n as \n    \n    network\n    \n, \n    \n    \n    recipient\n    \n as \n    \n    recipient\n    \n, \n    \n    \n    tokenization_method\n    \n as \n    \n    tokenization_method\n    \n, \n    cast(null as TEXT) as \n    \n    wallet_type\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as card_id,\n        account_id,\n        address_city as card_address_city,\n        address_country as card_address_country,\n        address_line_1 as card_address_line_1,\n        address_line_2 as card_address_line_2,\n        address_state as card_address_state,\n        address_zip as card_address_postal_code,\n        wallet_type,\n        brand,\n        country,\n        cast(created as timestamp) as created_at,\n        customer_id,\n        name as card_name,\n        recipient,\n        funding,\n        source_relation\n        \n        \n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__card\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.857654Z", "completed_at": "2024-08-06T05:17:39.176586Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:39.177171Z", "completed_at": "2024-08-06T05:17:39.177179Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3455171585083008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__customer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__customer_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_balance\n    \n as \n    \n    account_balance\n    \n, \n    \n    \n    address_city\n    \n as \n    \n    address_city\n    \n, \n    \n    \n    address_country\n    \n as \n    \n    address_country\n    \n, \n    \n    \n    address_line_1\n    \n as \n    \n    address_line_1\n    \n, \n    \n    \n    address_line_2\n    \n as \n    \n    address_line_2\n    \n, \n    \n    \n    address_postal_code\n    \n as \n    \n    address_postal_code\n    \n, \n    \n    \n    address_state\n    \n as \n    \n    address_state\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bank_account_id\n    \n as \n    \n    bank_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    default_card_id\n    \n as \n    \n    default_card_id\n    \n, \n    \n    \n    delinquent\n    \n as \n    \n    delinquent\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_prefix\n    \n as \n    \n    invoice_prefix\n    \n, \n    \n    \n    invoice_settings_default_payment_method\n    \n as \n    \n    invoice_settings_default_payment_method\n    \n, \n    \n    \n    invoice_settings_footer\n    \n as \n    \n    invoice_settings_footer\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    cast(null as TEXT) as \n    \n    metadata\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_line_1\n    \n as \n    \n    shipping_address_line_1\n    \n, \n    \n    \n    shipping_address_line_2\n    \n as \n    \n    shipping_address_line_2\n    \n, \n    \n    \n    shipping_address_postal_code\n    \n as \n    \n    shipping_address_postal_code\n    \n, \n    \n    \n    shipping_address_state\n    \n as \n    \n    shipping_address_state\n    \n, \n    \n    \n    shipping_carrier\n    \n as \n    \n    shipping_carrier\n    \n, \n    \n    \n    shipping_name\n    \n as \n    \n    shipping_name\n    \n, \n    \n    \n    shipping_phone\n    \n as \n    \n    shipping_phone\n    \n, \n    \n    \n    shipping_tracking_number\n    \n as \n    \n    shipping_tracking_number\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n, \n    \n    \n    tax_info_tax_id\n    \n as \n    \n    tax_info_tax_id\n    \n, \n    \n    \n    tax_info_type\n    \n as \n    \n    tax_info_type\n    \n, \n    \n    \n    tax_info_verification_status\n    \n as \n    \n    tax_info_verification_status\n    \n, \n    \n    \n    tax_info_verification_verified_name\n    \n as \n    \n    tax_info_verification_verified_name\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as customer_id,\n        account_balance,\n        address_city as customer_address_city,\n        address_country as customer_address_country,\n        address_line_1 as customer_address_line_1,\n        address_line_2 as customer_address_line_2,\n        address_postal_code as customer_address_postal_code,\n        address_state as customer_address_state,\n        balance as customer_balance,\n        bank_account_id,\n        cast(created as timestamp) as created_at,\n        currency,\n        default_card_id,\n        delinquent as is_delinquent,\n        description,\n        email,\n        metadata,\n        name as customer_name,\n        phone,\n        shipping_address_city,\n        shipping_address_country,\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_postal_code,\n        shipping_address_state,\n        shipping_name,\n        shipping_phone,\n        source_relation,\n        coalesce(is_deleted, false) as is_deleted\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.873484Z", "completed_at": "2024-08-06T05:17:39.177690Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:39.179031Z", "completed_at": "2024-08-06T05:17:39.179035Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3439018726348877, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__dispute", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__dispute_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    balance_transaction\n    \n as \n    \n    balance_transaction\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    evidence_access_activity_log\n    \n as \n    \n    evidence_access_activity_log\n    \n, \n    \n    \n    evidence_billing_address\n    \n as \n    \n    evidence_billing_address\n    \n, \n    \n    \n    evidence_cancellation_policy\n    \n as \n    \n    evidence_cancellation_policy\n    \n, \n    \n    \n    evidence_cancellation_policy_disclosure\n    \n as \n    \n    evidence_cancellation_policy_disclosure\n    \n, \n    \n    \n    evidence_cancellation_rebuttal\n    \n as \n    \n    evidence_cancellation_rebuttal\n    \n, \n    \n    \n    evidence_customer_communication\n    \n as \n    \n    evidence_customer_communication\n    \n, \n    \n    \n    evidence_customer_email_address\n    \n as \n    \n    evidence_customer_email_address\n    \n, \n    \n    \n    evidence_customer_name\n    \n as \n    \n    evidence_customer_name\n    \n, \n    \n    \n    evidence_customer_purchase_ip\n    \n as \n    \n    evidence_customer_purchase_ip\n    \n, \n    \n    \n    evidence_customer_signature\n    \n as \n    \n    evidence_customer_signature\n    \n, \n    \n    \n    evidence_details_due_by\n    \n as \n    \n    evidence_details_due_by\n    \n, \n    \n    \n    evidence_details_has_evidence\n    \n as \n    \n    evidence_details_has_evidence\n    \n, \n    \n    \n    evidence_details_past_due\n    \n as \n    \n    evidence_details_past_due\n    \n, \n    \n    \n    evidence_details_submission_count\n    \n as \n    \n    evidence_details_submission_count\n    \n, \n    \n    \n    evidence_duplicate_charge_documentation\n    \n as \n    \n    evidence_duplicate_charge_documentation\n    \n, \n    \n    \n    evidence_duplicate_charge_explanation\n    \n as \n    \n    evidence_duplicate_charge_explanation\n    \n, \n    \n    \n    evidence_duplicate_charge_id\n    \n as \n    \n    evidence_duplicate_charge_id\n    \n, \n    \n    \n    evidence_product_description\n    \n as \n    \n    evidence_product_description\n    \n, \n    \n    \n    evidence_receipt\n    \n as \n    \n    evidence_receipt\n    \n, \n    \n    \n    evidence_refund_policy\n    \n as \n    \n    evidence_refund_policy\n    \n, \n    \n    \n    evidence_refund_policy_disclosure\n    \n as \n    \n    evidence_refund_policy_disclosure\n    \n, \n    \n    \n    evidence_refund_refusal_explanation\n    \n as \n    \n    evidence_refund_refusal_explanation\n    \n, \n    \n    \n    evidence_service_date\n    \n as \n    \n    evidence_service_date\n    \n, \n    \n    \n    evidence_service_documentation\n    \n as \n    \n    evidence_service_documentation\n    \n, \n    \n    \n    evidence_shipping_address\n    \n as \n    \n    evidence_shipping_address\n    \n, \n    \n    \n    evidence_shipping_carrier\n    \n as \n    \n    evidence_shipping_carrier\n    \n, \n    \n    \n    evidence_shipping_date\n    \n as \n    \n    evidence_shipping_date\n    \n, \n    \n    \n    evidence_shipping_documentation\n    \n as \n    \n    evidence_shipping_documentation\n    \n, \n    \n    \n    evidence_shipping_tracking_number\n    \n as \n    \n    evidence_shipping_tracking_number\n    \n, \n    \n    \n    evidence_uncategorized_file\n    \n as \n    \n    evidence_uncategorized_file\n    \n, \n    \n    \n    evidence_uncategorized_text\n    \n as \n    \n    evidence_uncategorized_text\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_charge_refundable\n    \n as \n    \n    is_charge_refundable\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as dispute_id,\n        amount as dispute_amount,\n        balance_transaction,\n        charge_id,\n        connected_account_id,\n        cast(created as timestamp) as dispute_created_at,\n        currency as dispute_currency,\n        evidence_access_activity_log,\n        evidence_billing_address,\n        evidence_cancellation_policy,\n        evidence_cancellation_policy_disclosure,\n        evidence_cancellation_rebuttal,\n        evidence_customer_communication,\n        evidence_customer_email_address,\n        evidence_customer_name,\n        evidence_customer_purchase_ip,\n        evidence_customer_signature,\n        evidence_details_due_by,\n        evidence_details_has_evidence,\n        evidence_details_past_due,\n        evidence_details_submission_count,\n        evidence_duplicate_charge_documentation,\n        evidence_duplicate_charge_explanation,\n        evidence_duplicate_charge_id,\n        evidence_product_description,\n        evidence_receipt,\n        evidence_refund_policy,\n        evidence_refund_policy_disclosure,\n        evidence_refund_refusal_explanation,\n        evidence_service_date,\n        evidence_service_documentation,\n        evidence_shipping_address,\n        evidence_shipping_carrier,\n        evidence_shipping_date,\n        evidence_shipping_documentation,\n        evidence_shipping_tracking_number,\n        evidence_uncategorized_file,\n        evidence_uncategorized_text,\n        is_charge_refundable,\n        metadata as dispute_metadata,\n        reason as dispute_reason,\n        status as dispute_status,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__dispute\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.878606Z", "completed_at": "2024-08-06T05:17:39.178009Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:39.179521Z", "completed_at": "2024-08-06T05:17:39.179523Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3440999984741211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__fee", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__fee_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        balance_transaction_id,\n        index,\n        amount,\n        application,\n        currency,\n        description,\n        type,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__fee\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:38.869254Z", "completed_at": "2024-08-06T05:17:39.178507Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:39.180062Z", "completed_at": "2024-08-06T05:17:39.180067Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.34574007987976074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__discount", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__discount_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    type_id\n    \n as \n    \n    type_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    checkout_session_id\n    \n as \n    \n    checkout_session_id\n    \n, \n    \n    \n    checkout_session_line_item_id\n    \n as \n    \n    checkout_session_line_item_id\n    \n, \n    \n    \n    coupon_id\n    \n as \n    \n    coupon_id\n    \n, \n    \n    \n    credit_note_line_item_id\n    \n as \n    \n    credit_note_line_item_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_item_id\n    \n as \n    \n    invoice_item_id\n    \n, \n    \n    \n    promotion_code\n    \n as \n    \n    promotion_code\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n        \n            \n            \"end\"\n            \n        \n    \n as end_at , \n    \n    \n        \n            \n            \"start\"\n            \n        \n    \n as start_at \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as discount_id,\n        type,\n        type_id,\n        amount,\n        checkout_session_id,\n        checkout_session_line_item_id,\n        coupon_id,\n        credit_note_line_item_id,\n        customer_id,\n        cast(end_at as timestamp) as end_at, -- renamed in macro get_discount_columns, source column name: end\n        invoice_id,\n        invoice_item_id,\n        promotion_code,\n        cast(start_at as timestamp) as start_at, -- renamed in macro get_discount_columns, source column name: start\n        subscription_id,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__discount\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:39.204231Z", "completed_at": "2024-08-06T05:17:39.467846Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:39.468560Z", "completed_at": "2024-08-06T05:17:39.468567Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.29111289978027344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__invoice_line_item", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__invoice_line_item_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discountable\n    \n as \n    \n    discountable\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    cast(null as TEXT) as \n    \n    invoice_item_id\n    \n , \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    period_end\n    \n as \n    \n    period_end\n    \n, \n    \n    \n    period_start\n    \n as \n    \n    period_start\n    \n, \n    \n    \n    plan_id\n    \n as \n    \n    plan_id\n    \n, \n    cast(null as TEXT) as \n    \n    price_id\n    \n , \n    \n    \n    proration\n    \n as \n    \n    proration\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    subscription_item_id\n    \n as \n    \n    subscription_item_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unique_id\n    \n as \n    \n    unique_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_line_item_id,\n        invoice_id,\n        invoice_item_id,\n        amount,\n        currency,\n        description,\n        discountable as is_discountable,\n        plan_id,\n        price_id,\n        proration,\n        quantity,\n        subscription_id,\n        subscription_item_id,\n        type,\n        unique_id as unique_invoice_line_item_id,\n        period_start,\n        period_end,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n\n    \n    and id not like 'sub%' -- ids starting with 'sub' are temporary and are replaced by permanent ids starting with 'sli' \n    \n\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__invoice_line_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:39.264236Z", "completed_at": "2024-08-06T05:17:39.554814Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:39.565283Z", "completed_at": "2024-08-06T05:17:39.565294Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3759770393371582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_method_card", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payment_method_card_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    brand\n    \n as \n    \n    brand\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    funding\n    \n as \n    \n    funding\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    wallet_type\n    \n as \n    \n    wallet_type\n    \n, \n    cast(null as TEXT) as \n    \n    three_d_secure_authentication_flow\n    \n , \n    cast(null as TEXT) as \n    \n    three_d_secure_result\n    \n , \n    cast(null as TEXT) as \n    \n    three_d_secure_result_reason\n    \n , \n    cast(null as TEXT) as \n    \n    three_d_secure_version\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        payment_method_id,\n        brand,\n        funding,\n        charge_id,\n        type,\n        wallet_type,\n        three_d_secure_authentication_flow,\n        three_d_secure_result,\n        three_d_secure_result_reason,\n        three_d_secure_version,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payment_method_card\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:39.216305Z", "completed_at": "2024-08-06T05:17:39.565880Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:39.566471Z", "completed_at": "2024-08-06T05:17:39.566475Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.37728166580200195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__invoice", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__invoice_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as integer) as \n    \n    amount_due\n    \n , \n    cast(null as integer) as \n    \n    amount_paid\n    \n , \n    cast(null as integer) as \n    \n    amount_remaining\n    \n , \n    cast(null as integer) as \n    \n    application_fee_amount\n    \n , \n    cast(null as integer) as \n    \n    post_payment_credit_notes_amount\n    \n , \n    cast(null as integer) as \n    \n    pre_payment_credit_notes_amount\n    \n , \n    cast(null as integer) as \n    \n    attempt_count\n    \n , \n    cast(null as boolean) as \n    \n    attempted\n    \n , \n    cast(null as boolean) as \n    \n    auto_advance\n    \n , \n    cast(null as TEXT) as \n    \n    billing\n    \n , \n    cast(null as TEXT) as \n    \n    billing_reason\n    \n , \n    cast(null as TEXT) as \n    \n    charge_id\n    \n , \n    cast(null as timestamp) as \n    \n    created\n    \n , \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    cast(null as TEXT) as \n    \n    default_source_id\n    \n , \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    cast(null as timestamp) as \n    \n    due_date\n    \n , \n    cast(null as integer) as \n    \n    ending_balance\n    \n , \n    cast(null as timestamp) as \n    \n    finalized_at\n    \n , \n    cast(null as TEXT) as \n    \n    footer\n    \n , \n    cast(null as TEXT) as \n    \n    hosted_invoice_url\n    \n , \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as TEXT) as \n    \n    invoice_pdf\n    \n , \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    cast(null as TEXT) as \n    \n    metadata\n    \n , \n    cast(null as timestamp) as \n    \n    next_payment_attempt\n    \n , \n    cast(null as TEXT) as \n    \n    number\n    \n , \n    cast(null as boolean) as \n    \n    paid\n    \n , \n    cast(null as TEXT) as \n    \n    default_payment_method_id\n    \n , \n    cast(null as TEXT) as \n    \n    payment_intent_id\n    \n , \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    period_end\n    \n as \n    \n    period_end\n    \n, \n    \n    \n    period_start\n    \n as \n    \n    period_start\n    \n, \n    cast(null as TEXT) as \n    \n    receipt_number\n    \n , \n    cast(null as integer) as \n    \n    starting_balance\n    \n , \n    cast(null as TEXT) as \n    \n    statement_descriptor\n    \n , \n    cast(null as TEXT) as \n    \n    status\n    \n , \n    cast(null as timestamp) as \n    \n    status_transitions_finalized_at\n    \n , \n    cast(null as timestamp) as \n    \n    status_transitions_marked_uncollectible_at\n    \n , \n    cast(null as timestamp) as \n    \n    status_transitions_paid_at\n    \n , \n    cast(null as timestamp) as \n    \n    status_transitions_voided_at\n    \n , \n    cast(null as integer) as \n    \n    subscription_proration_date\n    \n , \n    cast(null as integer) as \n    \n    subtotal\n    \n , \n    cast(null as integer) as \n    \n    tax\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    tax_percent\n    \n , \n    cast(null as integer) as \n    \n    threshold_reason_amount_gte\n    \n , \n    cast(null as integer) as \n    \n    total\n    \n , \n    cast(null as timestamp) as \n    \n    webhooks_delivered_at\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_id,\n        default_payment_method_id,\n        payment_intent_id,\n        subscription_id,\n        amount_due,\n        amount_paid,\n        amount_remaining,\n        post_payment_credit_notes_amount,\n        pre_payment_credit_notes_amount,\n        attempt_count,\n        auto_advance,\n        billing_reason,\n        charge_id,\n        cast(created as timestamp) as created_at,\n        currency,\n        customer_id,\n        description,\n        due_date,\n        metadata,\n        number,\n        paid as is_paid,\n        receipt_number,\n        status,\n        subtotal,\n        tax,\n        tax_percent,\n        total,\n        period_start,\n        period_end,\n        cast(status_transitions_finalized_at as timestamp) as status_transitions_finalized_at,\n        cast(status_transitions_marked_uncollectible_at as timestamp) as status_transitions_marked_uncollectible_at,\n        cast(status_transitions_paid_at as timestamp) as status_transitions_paid_at,\n        cast(status_transitions_voided_at as timestamp) as status_transitions_voided_at,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n    and not coalesce(is_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__invoice\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:39.221465Z", "completed_at": "2024-08-06T05:17:39.567040Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:39.567620Z", "completed_at": "2024-08-06T05:17:39.567625Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.37795281410217285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_intent", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payment_intent_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_capturable\n    \n as \n    \n    amount_capturable\n    \n, \n    \n    \n    amount_received\n    \n as \n    \n    amount_received\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    application_fee_amount\n    \n as \n    \n    application_fee_amount\n    \n, \n    \n    \n    canceled_at\n    \n as \n    \n    canceled_at\n    \n, \n    \n    \n    cancellation_reason\n    \n as \n    \n    cancellation_reason\n    \n, \n    \n    \n    capture_method\n    \n as \n    \n    capture_method\n    \n, \n    \n    \n    confirmation_method\n    \n as \n    \n    confirmation_method\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_payment_error_charge_id\n    \n as \n    \n    last_payment_error_charge_id\n    \n, \n    \n    \n    last_payment_error_code\n    \n as \n    \n    last_payment_error_code\n    \n, \n    \n    \n    last_payment_error_decline_code\n    \n as \n    \n    last_payment_error_decline_code\n    \n, \n    \n    \n    last_payment_error_doc_url\n    \n as \n    \n    last_payment_error_doc_url\n    \n, \n    \n    \n    last_payment_error_message\n    \n as \n    \n    last_payment_error_message\n    \n, \n    \n    \n    last_payment_error_param\n    \n as \n    \n    last_payment_error_param\n    \n, \n    \n    \n    last_payment_error_source_id\n    \n as \n    \n    last_payment_error_source_id\n    \n, \n    \n    \n    last_payment_error_type\n    \n as \n    \n    last_payment_error_type\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    cast(null as TEXT) as \n    \n    metadata\n    \n , \n    \n    \n    on_behalf_of\n    \n as \n    \n    on_behalf_of\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    receipt_email\n    \n as \n    \n    receipt_email\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    transfer_data_destination\n    \n as \n    \n    transfer_data_destination\n    \n, \n    \n    \n    transfer_group\n    \n as \n    \n    transfer_group\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_intent_id,\n        amount,\n        amount_capturable,\n        amount_received,\n        application,\n        application_fee_amount,\n        cast(canceled_at as timestamp) as canceled_at,\n        cancellation_reason,\n        capture_method,\n        confirmation_method,\n        cast(created as timestamp) as created_at,\n        currency,\n        customer_id,\n        description,\n        metadata,\n        payment_method_id,\n        receipt_email,\n        statement_descriptor,\n        status,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payment_intent\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:39.496023Z", "completed_at": "2024-08-06T05:17:39.761269Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:39.762125Z", "completed_at": "2024-08-06T05:17:39.762133Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2948639392852783, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_method", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payment_method_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    billing_detail_address_city\n    \n as \n    \n    billing_detail_address_city\n    \n, \n    \n    \n    billing_detail_address_country\n    \n as \n    \n    billing_detail_address_country\n    \n, \n    \n    \n    billing_detail_address_line_1\n    \n as \n    \n    billing_detail_address_line_1\n    \n, \n    \n    \n    billing_detail_address_line_2\n    \n as \n    \n    billing_detail_address_line_2\n    \n, \n    \n    \n    billing_detail_address_postal_code\n    \n as \n    \n    billing_detail_address_postal_code\n    \n, \n    \n    \n    billing_detail_address_state\n    \n as \n    \n    billing_detail_address_state\n    \n, \n    \n    \n    billing_detail_email\n    \n as \n    \n    billing_detail_email\n    \n, \n    \n    \n    billing_detail_name\n    \n as \n    \n    billing_detail_name\n    \n, \n    \n    \n    billing_detail_phone\n    \n as \n    \n    billing_detail_phone\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    cast(null as TEXT) as \n    \n    metadata\n    \n , \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_method_id,\n        cast(created as timestamp) as created_at,\n        customer_id,\n        metadata,\n        type,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payment_method\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:39.600265Z", "completed_at": "2024-08-06T05:17:39.905920Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:39.906934Z", "completed_at": "2024-08-06T05:17:39.906945Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.33947181701660156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__price_plan", "compiled": true, "compiled_code": "\n\nwith price_plan as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__price_plan_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as is_active , \n    \n    \n    billing_scheme\n    \n as \n    \n    billing_scheme\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    nickname\n    \n as \n    \n    nickname\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    recurring_aggregate_usage\n    \n as \n    \n    recurring_aggregate_usage\n    \n, \n    \n    \n    recurring_interval\n    \n as \n    \n    recurring_interval\n    \n, \n    \n    \n    recurring_interval_count\n    \n as \n    \n    recurring_interval_count\n    \n, \n    \n    \n    recurring_usage_type\n    \n as \n    \n    recurring_usage_type\n    \n, \n    \n    \n    unit_amount\n    \n as \n    \n    unit_amount\n    \n, \n    \n    \n    unit_amount_decimal\n    \n as \n    \n    unit_amount_decimal\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from price_plan\n),\n\nfinal as (\n\n    select \n        id as price_plan_id,\n        is_active,\n        unit_amount,\n        currency,\n        recurring_interval,\n        recurring_interval_count,\n        recurring_usage_type,\n        recurring_aggregate_usage,\n        metadata,\n        nickname,\n        product_id,\n        billing_scheme,\n        cast(created as timestamp) as created_at,\n        is_deleted,\n        source_relation\n\n        \n        \n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__price_plan\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:39.605027Z", "completed_at": "2024-08-06T05:17:39.907793Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:39.908859Z", "completed_at": "2024-08-06T05:17:39.908866Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.33978891372680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__product", "compiled": true, "compiled_code": "\n\nwith product as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__product_tmp\"\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    fivetran_synced\n    \n , \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    active\n    \n as is_active , \n    cast(null as TEXT) as \n    \n    attributes\n    \n , \n    \n    \n    caption\n    \n as \n    \n    caption\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    cast(null as timestamp) as \n    \n    deactivate_on\n    \n , \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    cast(null as TEXT) as \n    \n    images\n    \n , \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    shippable\n    \n as \n    \n    shippable\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unit_label\n    \n as \n    \n    unit_label\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from product\n),\n\nfinal as (\n\n    select \n        id as product_id,\n        is_active, -- renamed in macro get_product_columns, source column name: active\n        attributes,\n        caption,\n        cast(created as timestamp) as created_at,\n        cast(deactivate_on as timestamp) as deactivate_at,\n        description,\n        images,\n        is_deleted,\n        name,\n        shippable,\n        statement_descriptor,\n        type,\n        unit_label,\n        updated,\n        url,\n        source_relation\n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__product\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:39.595413Z", "completed_at": "2024-08-06T05:17:39.908493Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:39.910086Z", "completed_at": "2024-08-06T05:17:39.910093Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3488187789916992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payout", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payout_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    arrival_date\n    \n as \n    \n    arrival_date\n    \n, \n    \n    \n    automatic\n    \n as \n    \n    automatic\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    destination_bank_account_id\n    \n as \n    \n    destination_bank_account_id\n    \n, \n    \n    \n    destination_card_id\n    \n as \n    \n    destination_card_id\n    \n, \n    \n    \n    failure_balance_transaction_id\n    \n as \n    \n    failure_balance_transaction_id\n    \n, \n    \n    \n    failure_code\n    \n as \n    \n    failure_code\n    \n, \n    \n    \n    failure_message\n    \n as \n    \n    failure_message\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    method\n    \n as \n    \n    method\n    \n, \n    \n    \n    source_type\n    \n as \n    \n    source_type\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payout_id,\n        amount,\n        cast(arrival_date as timestamp) as arrival_date_at,\n        automatic as is_automatic,\n        balance_transaction_id,\n        cast(created as timestamp) as created_at,\n        currency,\n        description,\n        destination_bank_account_id,\n        destination_card_id,\n        metadata,\n        method,\n        source_type,\n        status,\n        type,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payout\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:39.949057Z", "completed_at": "2024-08-06T05:17:39.956845Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:39.957371Z", "completed_at": "2024-08-06T05:17:39.957377Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009926080703735352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__account_account_id__source_relation.822bb93896", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__account\"\n    group by account_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:39.958968Z", "completed_at": "2024-08-06T05:17:39.964064Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:39.964593Z", "completed_at": "2024-08-06T05:17:39.964599Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00666499137878418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__account_account_id.374858379a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__account\"\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:39.966212Z", "completed_at": "2024-08-06T05:17:39.968748Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:39.969280Z", "completed_at": "2024-08-06T05:17:39.969285Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0040929317474365234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.int_stripe__incomplete_charges", "compiled": true, "compiled_code": "with charge as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__charge\"\n\n)\n\nselect \n  balance_transaction_id,\n  created_at,\n  customer_id,\n  connected_account_id,\n  amount,\n  source_relation\nfrom charge\nwhere not is_captured", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"int_stripe__incomplete_charges\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:39.971035Z", "completed_at": "2024-08-06T05:17:39.975014Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:39.975534Z", "completed_at": "2024-08-06T05:17:39.975538Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0056056976318359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__charge_charge_id__source_relation.4616b292a1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__charge\"\n    group by charge_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:39.977076Z", "completed_at": "2024-08-06T05:17:39.979861Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:39.980397Z", "completed_at": "2024-08-06T05:17:39.980401Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004291057586669922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__charge_charge_id.8941bc704a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__charge\"\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:39.981986Z", "completed_at": "2024-08-06T05:17:39.985252Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:39.985768Z", "completed_at": "2024-08-06T05:17:39.985772Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0047760009765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__balance_transaction_balance_transaction_id__source_relation.e83fa67eba", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__balance_transaction\"\n    group by balance_transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:39.987357Z", "completed_at": "2024-08-06T05:17:39.990157Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:39.990655Z", "completed_at": "2024-08-06T05:17:39.990659Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00427699089050293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__balance_transaction_balance_transaction_id.0ac20e778f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect balance_transaction_id\nfrom \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__balance_transaction\"\nwhere balance_transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:39.992248Z", "completed_at": "2024-08-06T05:17:39.995385Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:39.996065Z", "completed_at": "2024-08-06T05:17:39.996070Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0048618316650390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__card_card_id__source_relation.6e04594797", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        card_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__card\"\n    group by card_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:39.997818Z", "completed_at": "2024-08-06T05:17:40.001532Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.002075Z", "completed_at": "2024-08-06T05:17:40.002080Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005381107330322266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__card_card_id.edadd3106a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect card_id\nfrom \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__card\"\nwhere card_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.003637Z", "completed_at": "2024-08-06T05:17:40.006814Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.007332Z", "completed_at": "2024-08-06T05:17:40.007336Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004681110382080078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__customer_customer_id__source_relation.3fa0f43271", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__customer\"\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.008922Z", "completed_at": "2024-08-06T05:17:40.011690Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.012198Z", "completed_at": "2024-08-06T05:17:40.012201Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004246950149536133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__customer_customer_id.2e70421da0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__customer\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.013761Z", "completed_at": "2024-08-06T05:17:40.017015Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.017505Z", "completed_at": "2024-08-06T05:17:40.017509Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004747867584228516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__dispute_dispute_id__source_relation.3fe3205476", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        dispute_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__dispute\"\n    group by dispute_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.019097Z", "completed_at": "2024-08-06T05:17:40.023076Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.023583Z", "completed_at": "2024-08-06T05:17:40.023587Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005510807037353516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__fee_balance_transaction_id__index__source_relation.d2b1cfff07", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, index, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__fee\"\n    group by balance_transaction_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.025177Z", "completed_at": "2024-08-06T05:17:40.029170Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.029671Z", "completed_at": "2024-08-06T05:17:40.029675Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0054950714111328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__fee_balance_transaction_id.725d4ac005", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect balance_transaction_id\nfrom \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__fee\"\nwhere balance_transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.031313Z", "completed_at": "2024-08-06T05:17:40.035219Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.035734Z", "completed_at": "2024-08-06T05:17:40.035739Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005434989929199219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__discount_discount_id__type__type_id__source_relation.d9b54c55ae", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        discount_id, type, type_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__discount\"\n    group by discount_id, type, type_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.037348Z", "completed_at": "2024-08-06T05:17:40.040784Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.041267Z", "completed_at": "2024-08-06T05:17:40.041272Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004942893981933594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__invoice_line_item_invoice_line_item_id__invoice_id__source_relation.d2ff4b8aed", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_line_item_id, invoice_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__invoice_line_item\"\n    group by invoice_line_item_id, invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.043067Z", "completed_at": "2024-08-06T05:17:40.046133Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.046669Z", "completed_at": "2024-08-06T05:17:40.046674Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004867076873779297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__invoice_line_item_invoice_line_item_id.5b9c83b5f3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_line_item_id\nfrom \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__invoice_line_item\"\nwhere invoice_line_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.048439Z", "completed_at": "2024-08-06T05:17:40.051261Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.051790Z", "completed_at": "2024-08-06T05:17:40.051794Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004470109939575195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__invoice_invoice_id__source_relation.f632654e72", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__invoice\"\n    group by invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.053445Z", "completed_at": "2024-08-06T05:17:40.057574Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.058072Z", "completed_at": "2024-08-06T05:17:40.058076Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005632162094116211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_card_payment_method_id__source_relation.fe1f48acd0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_method_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payment_method_card\"\n    group by payment_method_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.059610Z", "completed_at": "2024-08-06T05:17:40.062468Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.062951Z", "completed_at": "2024-08-06T05:17:40.062955Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004374980926513672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__invoice_invoice_id.34cc0ff095", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__invoice\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.064574Z", "completed_at": "2024-08-06T05:17:40.067391Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.067887Z", "completed_at": "2024-08-06T05:17:40.067891Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004282712936401367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__payment_method_card_payment_method_id.f246b11438", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_method_id\nfrom \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payment_method_card\"\nwhere payment_method_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.069459Z", "completed_at": "2024-08-06T05:17:40.072619Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.073127Z", "completed_at": "2024-08-06T05:17:40.073131Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004651069641113281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_intent_payment_intent_id__source_relation.046730da02", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_intent_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payment_intent\"\n    group by payment_intent_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.083504Z", "completed_at": "2024-08-06T05:17:40.087927Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.089397Z", "completed_at": "2024-08-06T05:17:40.089406Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016078948974609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__payment_intent_payment_intent_id.cb5b4d09eb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_intent_id\nfrom \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payment_intent\"\nwhere payment_intent_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.092052Z", "completed_at": "2024-08-06T05:17:40.095478Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.096027Z", "completed_at": "2024-08-06T05:17:40.096032Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005189180374145508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_payment_method_id__source_relation.02a8143517", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_method_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payment_method\"\n    group by payment_method_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.097922Z", "completed_at": "2024-08-06T05:17:40.101023Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.101534Z", "completed_at": "2024-08-06T05:17:40.101539Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004703998565673828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__payment_method_payment_method_id.0a8907c471", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_method_id\nfrom \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payment_method\"\nwhere payment_method_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.103194Z", "completed_at": "2024-08-06T05:17:40.106764Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.107245Z", "completed_at": "2024-08-06T05:17:40.107250Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00506901741027832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__price_plan_price_plan_id__source_relation.3d189cd99d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        price_plan_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__price_plan\"\n    group by price_plan_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.109051Z", "completed_at": "2024-08-06T05:17:40.112336Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.112862Z", "completed_at": "2024-08-06T05:17:40.112867Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00500798225402832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__product_product_id__source_relation.cfe44d459e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__product\"\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:39.792041Z", "completed_at": "2024-08-06T05:17:40.088317Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.089721Z", "completed_at": "2024-08-06T05:17:40.089724Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.32797789573669434, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__refund", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__refund_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    cast(null as TEXT) as \n    \n    payment_intent_id\n    \n , \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    failure_balance_transaction_id\n    \n as \n    \n    failure_balance_transaction_id\n    \n, \n    \n    \n    failure_reason\n    \n as \n    \n    failure_reason\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    receipt_number\n    \n as \n    \n    receipt_number\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as refund_id,\n        payment_intent_id,\n        balance_transaction_id,\n        charge_id,\n        amount,\n        cast(created as timestamp) as created_at,\n        currency,\n        description,\n        metadata,\n        reason,\n        receipt_number,\n        status,\n        source_relation\n\n        \n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__refund\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.114588Z", "completed_at": "2024-08-06T05:17:40.117675Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.118518Z", "completed_at": "2024-08-06T05:17:40.118524Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006543874740600586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payout_payout_id__source_relation.f9897a29ec", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payout_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payout\"\n    group by payout_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.122724Z", "completed_at": "2024-08-06T05:17:40.128493Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.129511Z", "completed_at": "2024-08-06T05:17:40.129515Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008738994598388672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__payout_payout_id.6864a8acfc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payout_id\nfrom \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payout\"\nwhere payout_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.125339Z", "completed_at": "2024-08-06T05:17:40.128764Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.129768Z", "completed_at": "2024-08-06T05:17:40.129771Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008890867233276367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__refund_refund_id__source_relation.93aa6111ec", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__refund\"\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.131972Z", "completed_at": "2024-08-06T05:17:40.135024Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.135520Z", "completed_at": "2024-08-06T05:17:40.135524Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004540920257568359, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__refund_refund_id.7c6dcedec0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__refund\"\nwhere refund_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:39.935774Z", "completed_at": "2024-08-06T05:17:40.206949Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.207512Z", "completed_at": "2024-08-06T05:17:40.207520Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.29650092124938965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__subscription", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__subscription_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_active\n    \n as \n    \n    _fivetran_active\n    \n, \n    \n    \n    application_fee_percent\n    \n as \n    \n    application_fee_percent\n    \n, \n    \n    \n    billing\n    \n as \n    \n    billing\n    \n, \n    \n    \n    billing_cycle_anchor\n    \n as \n    \n    billing_cycle_anchor\n    \n, \n    \n    \n    billing_threshold_amount_gte\n    \n as \n    \n    billing_threshold_amount_gte\n    \n, \n    \n    \n    billing_threshold_reset_billing_cycle_anchor\n    \n as \n    \n    billing_threshold_reset_billing_cycle_anchor\n    \n, \n    \n    \n    cancel_at\n    \n as \n    \n    cancel_at\n    \n, \n    \n    \n    cancel_at_period_end\n    \n as \n    \n    cancel_at_period_end\n    \n, \n    \n    \n    canceled_at\n    \n as \n    \n    canceled_at\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    current_period_end\n    \n as \n    \n    current_period_end\n    \n, \n    \n    \n    current_period_start\n    \n as \n    \n    current_period_start\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    days_until_due\n    \n as \n    \n    days_until_due\n    \n, \n    \n    \n    default_source_id\n    \n as \n    \n    default_source_id\n    \n, \n    \n    \n    ended_at\n    \n as \n    \n    ended_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as TEXT) as \n    \n    latest_invoice_id\n    \n , \n    cast(null as TEXT) as \n    \n    default_payment_method_id\n    \n , \n    cast(null as TEXT) as \n    \n    pending_setup_intent_id\n    \n , \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    tax_percent\n    \n as \n    \n    tax_percent\n    \n, \n    \n    \n    trial_end\n    \n as \n    \n    trial_end\n    \n, \n    \n    \n    trial_start\n    \n as \n    \n    trial_start\n    \n, \n    cast(null as TEXT) as \n    \n    pause_collection_behavior\n    \n , \n    cast(null as timestamp) as \n    \n    pause_collection_resumes_at\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as subscription_id,\n        latest_invoice_id,\n        customer_id,\n        default_payment_method_id,\n        pending_setup_intent_id,\n        status,\n        billing,\n        billing_cycle_anchor,\n        cast(cancel_at as timestamp) as cancel_at,\n        cancel_at_period_end as is_cancel_at_period_end,\n        cast(canceled_at as timestamp) as canceled_at,\n        cast(created as timestamp) as created_at,\n        current_period_start,\n        current_period_end,\n        days_until_due,\n        metadata,\n        cast(start_date as timestamp) as start_date_at,\n        cast(ended_at as timestamp) as ended_at,\n        pause_collection_behavior,\n        cast(pause_collection_resumes_at as timestamp) as pause_collection_resumes_at,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n    \n        and coalesce(_fivetran_active, true)\n    \n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__subscription\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:39.943265Z", "completed_at": "2024-08-06T05:17:40.229058Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.229598Z", "completed_at": "2024-08-06T05:17:40.229605Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3285329341888428, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__transfer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__transfer_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_reversed\n    \n as \n    \n    amount_reversed\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    destination\n    \n as \n    \n    destination\n    \n, \n    \n    \n    destination_payment\n    \n as \n    \n    destination_payment\n    \n, \n    \n    \n    destination_payment_id\n    \n as \n    \n    destination_payment_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    reversed\n    \n as \n    \n    reversed\n    \n, \n    \n    \n    source_transaction\n    \n as \n    \n    source_transaction\n    \n, \n    \n    \n    source_transaction_id\n    \n as \n    \n    source_transaction_id\n    \n, \n    \n    \n    source_type\n    \n as \n    \n    source_type\n    \n, \n    \n    \n    transfer_group\n    \n as \n    \n    transfer_group\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as transfer_id,\n        amount as transfer_amount,\n        amount_reversed as transfer_amount_reversed,\n        balance_transaction_id,\n        cast(created as timestamp) as transfer_created_at,\n        currency as transfer_currency,\n        description as transfer_description,\n        destination as transfer_destination,\n        destination_payment,\n        destination_payment_id,\n        metadata as transfer_metadata,\n        reversed as transfer_is_reversed,\n        source_transaction,\n        source_transaction_id,\n        source_type,\n        transfer_group,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__transfer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.239582Z", "completed_at": "2024-08-06T05:17:40.271237Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.276498Z", "completed_at": "2024-08-06T05:17:40.276505Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04514813423156738, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__line_item_enhanced", "compiled": true, "compiled_code": "\n\nwith invoice_line_item as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__invoice_line_item\" \n\n), invoice as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__invoice\"\n\n\n), subscription as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__subscription\"  \n\n), price_plan as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__price_plan\"  \n\n), product as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__product\"\n\n\n\n), payment_intent as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payment_intent\" \n\n), payment_method as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payment_method\"\n\n), fee as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__fee\" \n\n), account as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__account\"\n\n), balance_transaction as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__balance_transaction\" \n\n), charge as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__charge\" \n\n), discount as (\n\n    select\n        invoice_id,\n        source_relation,\n        sum(amount) as total_discount_amount\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__discount\"\n    group by 1, 2\n\n), line_item_aggregate as (\n\n    select\n        invoice_id,\n        source_relation,\n        sum(amount) as total_line_item_amount\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__invoice_line_item\"\n    group by 1, 2\n\n), refund as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__refund\" \n\n), customer as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__customer\" \n\n), enhanced as (\n\n    select\n        invoice_line_item.invoice_id as header_id,\n        cast(invoice_line_item.invoice_line_item_id as TEXT) as line_item_id,\n        row_number() over (partition by invoice_line_item.invoice_id order by invoice_line_item.amount desc) as line_item_index,\n        invoice.created_at as created_at,\n        cast(invoice_line_item.currency as TEXT) as currency,\n        cast(invoice.status as TEXT) as header_status,\n\n        cast(price_plan.product_id as TEXT) as product_id, -- The ID of the product this price is associated with. https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-price-product\n        cast(product.name as TEXT) as product_name,\n        cast(product.type as TEXT) as product_type,\n\n        cast(balance_transaction.type as TEXT) as transaction_type,\n        cast(invoice_line_item.type as TEXT) as billing_type,\n        cast(invoice_line_item.quantity as numeric(28,6)) as quantity,\n        cast((invoice_line_item.amount/invoice_line_item.quantity) as numeric(28,6)) as unit_amount,\n        cast(discount.total_discount_amount as numeric(28,6)) as discount_amount,\n        cast(invoice.tax as numeric(28,6)) as tax_amount,\n        cast(line_item_aggregate.total_line_item_amount as numeric(28,6)) as total_line_item_amount,\n        cast(invoice.total as numeric(28,6)) as total_invoice_amount,\n        cast(invoice_line_item.amount as numeric(28,6)) as total_amount,\n        cast(payment_intent.payment_intent_id as TEXT) as payment_id,\n        cast(payment_method.payment_method_id as TEXT) as payment_method_id,\n        cast(payment_method.type as TEXT) as payment_method,\n        cast(charge.created_at as timestamp) as payment_at,\n        cast(balance_transaction.fee as numeric(28,6)) as fee_amount,\n        cast(refund.amount as numeric(28,6)) as refund_amount,\n        cast(invoice.subscription_id as TEXT) as subscription_id,\n\n        cast(product.name as TEXT) as subscription_plan,\n        cast(subscription.current_period_start as timestamp) as subscription_period_started_at,\n        cast(subscription.current_period_end as timestamp) as subscription_period_ended_at,\n        cast(subscription.status as TEXT) as subscription_status,\n\n        cast(invoice.customer_id as TEXT) as customer_id,\n        cast(customer.created_at as timestamp) as customer_created_at,\n        'customer' as customer_level,\n        cast(customer.customer_name as TEXT) as customer_name, \n        cast(connected_account.company_name as TEXT) as customer_company, \n        cast(customer.email as TEXT) as customer_email,\n        cast(customer.customer_address_city as TEXT) as customer_city,\n        cast(customer.customer_address_country as TEXT) as customer_country,\n        invoice_line_item.source_relation\n\n    from invoice_line_item\n\n    left join invoice\n        on invoice.invoice_id = invoice_line_item.invoice_id\n        and invoice.source_relation = invoice_line_item.source_relation\n\n    left join line_item_aggregate\n        on invoice.invoice_id = line_item_aggregate.invoice_id\n        and invoice.source_relation = line_item_aggregate.source_relation\n\n    left join charge \n        on invoice.charge_id = charge.charge_id\n        and invoice.invoice_id = charge.invoice_id\n        and invoice.source_relation = charge.source_relation\n\n    left join balance_transaction\n        on charge.balance_transaction_id = balance_transaction.balance_transaction_id\n        and charge.source_relation = balance_transaction.source_relation\n\n    left join discount \n        on invoice.invoice_id = discount.invoice_id\n        and invoice.source_relation = discount.source_relation\n\n    left join refund \n        on balance_transaction.balance_transaction_id = refund.balance_transaction_id\n        and balance_transaction.source_relation = refund.source_relation\n\n    left join account connected_account\n        on balance_transaction.connected_account_id = connected_account.account_id\n        and balance_transaction.source_relation = connected_account.source_relation\n\n    left join payment_intent\n        on charge.payment_intent_id = payment_intent.payment_intent_id\n        and charge.source_relation = payment_intent.source_relation\n\n    left join payment_method \n        on charge.payment_method_id = payment_method.payment_method_id\n        and charge.source_relation = payment_method.source_relation\n\n    left join customer \n        on invoice.customer_id = customer.customer_id\n        and invoice.source_relation = customer.source_relation\n\n    \n\n    left join subscription\n        on invoice.subscription_id = subscription.subscription_id\n        and invoice.source_relation = subscription.source_relation\n\n    left join price_plan\n\n    \n        on invoice_line_item.price_id = price_plan.price_plan_id\n    \n        and invoice_line_item.source_relation = price_plan.source_relation\n\n    left join product\n        on price_plan.product_id = product.product_id\n        and price_plan.source_relation = product.source_relation\n    \n\n), final as (\n\n-- invoice_line_item_level\n    select\n        header_id,\n        line_item_id,\n        line_item_index,\n        'line_item' as record_type,\n        created_at,\n        currency,\n        header_status,\n        product_id,\n        product_name,\n        transaction_type,\n        billing_type,\n        product_type,\n        quantity,\n        unit_amount,\n        cast(null as numeric(28,6)) as discount_amount,\n        cast(null as numeric(28,6)) as tax_amount,\n        total_amount,\n        payment_id,\n        payment_method_id,\n        payment_method,\n        payment_at,\n        cast(null as numeric(28,6)) as fee_amount,\n        cast(null as numeric(28,6)) as refund_amount,\n        subscription_id,\n        subscription_plan,\n        subscription_period_started_at,\n        subscription_period_ended_at,\n        subscription_status,\n        customer_id,\n        customer_created_at,\n        customer_level,\n        customer_name,\n        customer_company,\n        customer_email,\n        customer_city,\n        customer_country,\n        source_relation\n    from enhanced\n\n    union all\n\n    -- create records for fields only pertinent at the invoice level\n    select\n        header_id,\n        cast(null as TEXT) as line_item_id,\n        cast(0 as integer) as line_item_index,\n        'header' as record_type,\n        created_at,\n        currency,\n        header_status,\n        cast(null as TEXT) as product_id,\n        cast(null as TEXT) as product_name,\n        transaction_type,\n        billing_type,\n        cast(null as TEXT) as product_type,\n        cast(null as float) as quantity,\n        cast(null as float) as unit_amount,\n        discount_amount,\n        tax_amount,\n        cast((total_invoice_amount - total_line_item_amount) as float) as total_amount,\n        payment_id,\n        payment_method_id,\n        payment_method,\n        payment_at,\n        fee_amount,\n        refund_amount,\n        subscription_id,\n        subscription_plan,\n        subscription_period_started_at,\n        subscription_period_ended_at,\n        subscription_status,\n        customer_id,\n        customer_created_at,\n        customer_level,\n        customer_name,\n        customer_company,\n        customer_email,\n        customer_city,\n        customer_country,\n        source_relation\n    from enhanced\n    where line_item_index = 1\n        and (discount_amount is not null or tax_amount is not null or fee_amount is not null or refund_amount is not null)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__line_item_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.233833Z", "completed_at": "2024-08-06T05:17:40.271587Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.277083Z", "completed_at": "2024-08-06T05:17:40.277087Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.046465158462524414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__invoice_details", "compiled": true, "compiled_code": "\n\nwith invoice as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__invoice\"  \n\n), charge as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__charge\"  \n\n), invoice_line_item as (\n\n    select\n        invoice_id,\n        source_relation,\n        coalesce(count(distinct unique_invoice_line_item_id),0) as number_of_line_items,\n        coalesce(sum(quantity),0) as total_quantity\n\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__invoice_line_item\"  \n    group by 1,2\n\n), customer as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__customer\"  \n\n\n\n), subscription as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__subscription\"  \n\n), price_plan as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__price_plan\"  \n\n\n)\n\nselect \n    invoice.invoice_id,\n    invoice.number as invoice_number,\n    invoice.created_at as invoice_created_at,\n    invoice.period_start,\n    invoice.period_end,\n    invoice.status,\n    invoice.due_date,\n    invoice.currency,\n    coalesce(invoice.amount_due,0) as amount_due,\n    coalesce(invoice.amount_paid,0) as amount_paid,\n    coalesce(invoice.subtotal,0) as subtotal,\n    coalesce(invoice.tax,0) as tax,\n    coalesce(invoice.total,0) as total,\n    coalesce(invoice.amount_remaining,0) as amount_remaining,\n    coalesce(invoice.attempt_count,0) as attempt_count,\n    invoice.description as invoice_memo,\n    invoice_line_item.number_of_line_items,\n    invoice_line_item.total_quantity,\n    charge.balance_transaction_id,\n    charge.amount as charge_amount, \n    charge.status as charge_status,\n    charge.connected_account_id, \n    charge.created_at as charge_created_at,\n    charge.is_refunded as charge_is_refunded,\n    customer.customer_id,\n    customer.description as customer_description,\n    customer.account_balance as customer_account_balance,\n    customer.currency as customer_currency,\n    customer.is_delinquent as customer_is_delinquent,\n    customer.email as customer_email,\n    \n    \n    subscription.subscription_id,\n    subscription.billing as subscription_billing,\n    subscription.start_date_at as subscription_start_date,\n    subscription.ended_at as subscription_ended_at,\n\n    \n    invoice.source_relation\n\nfrom invoice\n\nleft join invoice_line_item \n    on invoice.invoice_id = invoice_line_item.invoice_id\n    and invoice.source_relation = invoice_line_item.source_relation\n\nleft join charge \n    on invoice.charge_id = charge.charge_id\n    and invoice.invoice_id = charge.invoice_id\n    and invoice.source_relation = charge.source_relation\n\n\nleft join subscription\n    on invoice.subscription_id = subscription.subscription_id\n    and invoice.source_relation = subscription.source_relation\n\n\n\nleft join customer \n    on invoice.customer_id = customer.customer_id\n    and invoice.source_relation = customer.source_relation", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__invoice_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.262827Z", "completed_at": "2024-08-06T05:17:40.272524Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.277992Z", "completed_at": "2024-08-06T05:17:40.277997Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04677987098693848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__subscription_details", "compiled": true, "compiled_code": "\n\nwith invoice as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__invoice\"  \n\n), charge as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__charge\"  \n\n), invoice_line_item as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__invoice_line_item\"  \n\n), subscription as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__subscription\"  \n\n), customer as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__customer\"  \n\n), line_items_groups as (\n\n  select\n    invoice.invoice_id,\n    invoice.amount_due,\n    invoice.amount_paid,\n    invoice.amount_remaining,\n    invoice.created_at,\n    invoice.source_relation,\n    max(invoice_line_item.subscription_id) as subscription_id,\n    coalesce(sum(invoice_line_item.amount),0) as total_line_item_amount,\n    coalesce(count(distinct invoice_line_item.unique_invoice_line_item_id),0) as number_of_line_items\n  from invoice_line_item\n  join invoice \n    on invoice.invoice_id = invoice_line_item.invoice_id\n  group by 1, 2, 3, 4, 5, 6\n\n), grouped_by_subscription as (\n\n  select\n    subscription_id,\n    source_relation,\n    count(distinct invoice_id) as number_invoices_generated,\n    sum(amount_due) as total_amount_billed,\n    sum(amount_paid) as total_amount_paid,\n    sum(amount_remaining) total_amount_remaining,\n    max(created_at) as most_recent_invoice_created_at,\n    avg(amount_due) as average_invoice_amount,\n    avg(total_line_item_amount) as average_line_item_amount,\n    avg(number_of_line_items) as avg_num_line_items\n  from line_items_groups\n  group by 1, 2\n\n)\n\n\nselect\n  subscription.subscription_id,\n  subscription.customer_id,\n  customer.description as customer_description,\n  customer.email as customer_email,\n  subscription.status,\n  subscription.start_date_at,\n  subscription.ended_at,\n  subscription.billing,\n  subscription.billing_cycle_anchor,\n  subscription.canceled_at,\n  subscription.created_at,\n  subscription.current_period_start,\n  subscription.current_period_end,\n  subscription.days_until_due,\n  subscription.is_cancel_at_period_end,\n  subscription.cancel_at,\n  number_invoices_generated,\n  total_amount_billed,\n  total_amount_paid,\n  total_amount_remaining,\n  most_recent_invoice_created_at,\n  average_invoice_amount,\n  average_line_item_amount,\n  avg_num_line_items,\n  subscription.source_relation\nfrom subscription\nleft join grouped_by_subscription \n  on subscription.subscription_id = grouped_by_subscription.subscription_id\n  and subscription.source_relation = grouped_by_subscription.source_relation\nleft join customer\n  on subscription.customer_id = customer.customer_id\n  and subscription.source_relation = customer.source_relation", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__subscription_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.273060Z", "completed_at": "2024-08-06T05:17:40.278797Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.281841Z", "completed_at": "2024-08-06T05:17:40.281847Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012519121170043945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__subscription_subscription_id__source_relation.1b87d4205c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        subscription_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__subscription\"\n    group by subscription_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.283743Z", "completed_at": "2024-08-06T05:17:40.306055Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.311608Z", "completed_at": "2024-08-06T05:17:40.311618Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03230619430541992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__subscription_subscription_id.b242b1f7bc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__subscription\"\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.287045Z", "completed_at": "2024-08-06T05:17:40.306449Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.312322Z", "completed_at": "2024-08-06T05:17:40.312326Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03253793716430664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__balance_transactions", "compiled": true, "compiled_code": "with balance_transaction as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__balance_transaction\"\n\n), account as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__account\"\n\n), cards as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__card\"\n\n), charge as (\n    \n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__charge\"\n\n), customer as (\n    \n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__customer\"\n\n), dispute as (\n    \n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__dispute\"\n\n\n), invoice as (\n    \n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__invoice\"\n\n\n), payment_intent as (\n    \n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payment_intent\"\n\n\n), payment_method as (\n    \n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payment_method\"\n\n), payment_method_card as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payment_method_card\"\n\n\n), payout as (\n    \n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__payout\"\n\n), refund as (\n    \n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__refund\"\n\n\n), subscription as (\n    \n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__subscription\"\n\n\n), transfers as (\n    \n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__transfer\"\n\n)\n\nselect\n    balance_transaction.balance_transaction_id,\n    balance_transaction.created_at as balance_transaction_created_at,\n    balance_transaction.available_on as balance_transaction_available_on,\n    balance_transaction.currency as balance_transaction_currency,\n    balance_transaction.amount as balance_transaction_amount,\n    balance_transaction.fee as balance_transaction_fee,\n    balance_transaction.net as balance_transaction_net,\n    balance_transaction.source as balance_transaction_source_id,\n    balance_transaction.description as balance_transaction_description,\n    balance_transaction.type as balance_transaction_type,\n    coalesce(balance_transaction.reporting_category,\n        case\n            when balance_transaction.type in ('charge', 'payment') then 'charge'\n            when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n            when balance_transaction.type in ('payout_cancel', 'payout_failure') then 'payout_reversal'\n            when balance_transaction.type in ('transfer', 'recipient_transfer') then 'transfer'\n            when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n            else balance_transaction.type end)\n    as balance_transaction_reporting_category,\n    case\n        when balance_transaction.type in ('charge', 'payment') then charge.amount \n        when balance_transaction.type in ('refund', 'payment_refund') then refund.amount\n        when dispute_id is not null then dispute.dispute_amount\n        else null\n    end as customer_facing_amount,\n    case \n        when balance_transaction.type = 'charge' then charge.currency \n    end as customer_facing_currency,\n    \n\n    balance_transaction.available_on + ((interval '1 day') * (1))\n\n as effective_at,\n    case\n        when payout.is_automatic = true then payout.payout_id \n        else null\n    end as automatic_payout_id,\n    payout.payout_id,\n    payout.created_at as payout_created_at,\n    payout.currency as payout_currency,\n    payout.is_automatic as payout_is_automatic,\n    payout.arrival_date_at as payout_arrival_date_at,\n    case\n        when payout.is_automatic = true then payout.arrival_date_at\n        else null\n    end as automatic_payout_effective_at,\n    payout.type as payout_type,\n    payout.status as payout_status,\n    payout.description as payout_description,\n    payout.destination_bank_account_id,\n    payout.destination_card_id,\n    coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n    charge.receipt_email,\n    customer.email as customer_email,\n    customer.customer_name,\n    customer.description as customer_description,\n    customer.shipping_address_line_1 as customer_shipping_address_line_1,\n    customer.shipping_address_line_2 as customer_shipping_address_line_2,\n    customer.shipping_address_city as customer_shipping_address_city,\n    customer.shipping_address_state as customer_shipping_address_state,\n    customer.shipping_address_postal_code as customer_shipping_address_postal_code,\n    customer.shipping_address_country as customer_shipping_address_country,\n    customer.customer_address_line_1,\n    customer.customer_address_line_2,\n    customer.customer_address_city,\n    customer.customer_address_state,\n    customer.customer_address_postal_code,\n    customer.customer_address_country,\n    charge.shipping_address_line_1 as charge_shipping_address_line_1,\n    charge.shipping_address_line_2 as charge_shipping_address_line_2,\n    charge.shipping_address_city as charge_shipping_address_city,\n    charge.shipping_address_state as charge_shipping_address_state,\n    charge.shipping_address_postal_code as charge_shipping_address_postal_code,\n    charge.shipping_address_country as charge_shipping_address_country,\n    cards.card_address_line_1,\n    cards.card_address_line_2,\n    cards.card_address_city,\n    cards.card_address_state,\n    cards.card_address_postal_code,\n    cards.card_address_country,\n    coalesce(charge.charge_id, refund.charge_id, dispute.charge_id) as charge_id,\n    charge.created_at as charge_created_at,\n    payment_intent.payment_intent_id,\n\n    \n    invoice.invoice_id,\n    invoice.number as invoice_number,\n    \n\n    \n    subscription.subscription_id,\n    \n\n    \n    payment_method.type as payment_method_type,\n    payment_method_card.brand as payment_method_brand,\n    payment_method_card.funding as payment_method_funding,\n    \n\n    cards.brand as card_brand,\n    cards.funding as card_funding,\n    cards.country as card_country,\n    charge.statement_descriptor as charge_statement_descriptor ,\n    dispute.dispute_id,\n    dispute.dispute_reason,\n    refund.refund_id,\n    refund.reason as refund_reason,\n    transfers.transfer_id,\n    coalesce(balance_transaction.connected_account_id, charge.connected_account_id) as connected_account_id,\n    connected_account.country as connected_account_country,\n    case \n        when charge.connected_account_id is not null then charge.charge_id\n        else null\n    end as connected_account_direct_charge_id,\n    balance_transaction.source_relation\n\nfrom balance_transaction\n\nleft join payout \n    on payout.balance_transaction_id = balance_transaction.balance_transaction_id\n    and payout.source_relation = balance_transaction.source_relation\nleft join account connected_account\n    on balance_transaction.connected_account_id = connected_account.account_id\n    and balance_transaction.source_relation = connected_account.source_relation\nleft join charge\n    on charge.balance_transaction_id = balance_transaction.balance_transaction_id\n    and charge.source_relation = balance_transaction.source_relation\nleft join customer \n    on charge.customer_id = customer.customer_id\n    and charge.source_relation = customer.source_relation\nleft join cards\n    on charge.card_id = cards.card_id\n    and charge.source_relation = cards.source_relation\nleft join payment_intent\n    on charge.payment_intent_id = payment_intent.payment_intent_id\n    and charge.source_relation = payment_intent.source_relation\n\n\nleft join payment_method\n    on charge.payment_method_id = payment_method.payment_method_id\n    and charge.source_relation = payment_method.source_relation\nleft join payment_method_card \n    on payment_method_card.payment_method_id = payment_method.payment_method_id\n    and charge.source_relation = balance_transaction.source_relation\n\n\n\nleft join invoice \n    on charge.invoice_id = invoice.invoice_id\n    and charge.source_relation = invoice.source_relation\n\n\n\nleft join subscription\n    on subscription.latest_invoice_id =  charge.invoice_id\n    and subscription.source_relation =  charge.source_relation\n\n\nleft join refund\n    on refund.balance_transaction_id = balance_transaction.balance_transaction_id\n    and refund.source_relation = balance_transaction.source_relation\nleft join transfers \n    on transfers.balance_transaction_id = balance_transaction.balance_transaction_id\n    and transfers.source_relation = balance_transaction.source_relation\nleft join charge as refund_charge \n    on refund.charge_id = refund_charge.charge_id\n    and refund.source_relation = refund_charge.source_relation\nleft join dispute\n    on charge.charge_id = dispute.charge_id\n    and charge.source_relation = dispute.source_relation", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__balance_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.301109Z", "completed_at": "2024-08-06T05:17:40.311923Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.314621Z", "completed_at": "2024-08-06T05:17:40.314625Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03421211242675781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__transfer_transfer_id__source_relation.ade160ba67", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transfer_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__transfer\"\n    group by transfer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.307879Z", "completed_at": "2024-08-06T05:17:40.314929Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.318704Z", "completed_at": "2024-08-06T05:17:40.318710Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02162003517150879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__line_item_enhanced_header_id__line_item_id__source_relation.cb4229b7a7", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        header_id, line_item_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__line_item_enhanced\"\n    group by header_id, line_item_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.319285Z", "completed_at": "2024-08-06T05:17:40.331665Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.336624Z", "completed_at": "2024-08-06T05:17:40.336631Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.07503890991210938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__invoice_line_item_details", "compiled": true, "compiled_code": "\n\nwith invoice_line_item as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__invoice_line_item\" \n\n), invoice_details as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__invoice_details\"\n\n\n), subscription as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__subscription\"  \n\n), price_plan as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__price_plan\"  \n\n\n)\n\nselect \n    invoice_line_item.invoice_line_item_id,\n    invoice_line_item.invoice_id,\n    invoice_line_item.invoice_item_id,\n    coalesce(invoice_line_item.amount,0) as invoice_line_item_amount,\n    invoice_line_item.currency,\n    invoice_line_item.description as invoice_line_item_memo,\n    invoice_line_item.is_discountable,\n    invoice_line_item.plan_id,\n    invoice_line_item.price_id,\n    invoice_line_item.proration,\n    invoice_line_item.quantity,\n    invoice_line_item.subscription_id,\n    invoice_line_item.subscription_item_id,\n    invoice_line_item.type,\n    invoice_line_item.unique_invoice_line_item_id,\n    invoice_line_item.period_start,\n    invoice_line_item.period_end,\n    invoice_details.invoice_created_at,\n    invoice_details.status as invoice_status,\n    invoice_details.due_date as invoice_due_date,\n    coalesce(invoice_details.amount_due,0) as invoice_amount_due,\n    coalesce(invoice_details.amount_paid,0) as invoice_amount_paid,\n    coalesce(invoice_details.subtotal,0) as invoice_subtotal,\n    coalesce(invoice_details.tax,0) as invoice_tax,\n    coalesce(invoice_details.total,0) as invoice_total,\n    invoice_details.connected_account_id as connected_account_id,\n    invoice_details.customer_id as customer_id,\n\n    \n\n    subscription.billing as subscription_billing,\n    subscription.start_date_at as subscription_start_date,\n    subscription.ended_at as subscription_ended_at,\n    price_plan.is_active as price_plan_is_active,\n    price_plan.unit_amount as price_plan_amount,\n    price_plan.recurring_interval as price_plan_interval,\n    price_plan.recurring_interval_count as price_plan_interval_count,\n    price_plan.nickname as price_plan_nickname,\n    price_plan.product_id as price_plan_product_id,\n    \n\n    invoice_line_item.source_relation\n    \nfrom invoice_line_item\n\nleft join invoice_details \n    on invoice_line_item.invoice_id = invoice_details.invoice_id\n    and invoice_line_item.source_relation = invoice_details.source_relation\n\n\n\nleft join subscription\n    on invoice_line_item.subscription_id = subscription.subscription_id\n    and invoice_line_item.source_relation = subscription.source_relation\n\nleft join price_plan\n\n\n    on invoice_line_item.price_id = price_plan.price_plan_id\n\n\n    and invoice_line_item.source_relation = price_plan.source_relation\n\n", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__invoice_line_item_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.327436Z", "completed_at": "2024-08-06T05:17:40.336279Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.391788Z", "completed_at": "2024-08-06T05:17:40.391794Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.07581901550292969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__invoice_details_invoice_id__source_relation.77a5fcff44", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__invoice_details\"\n    group by invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.332003Z", "completed_at": "2024-08-06T05:17:40.336892Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.392524Z", "completed_at": "2024-08-06T05:17:40.392529Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06782317161560059, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__subscription_details_subscription_id__source_relation.a1aa0c421a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        subscription_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__subscription_details\"\n    group by subscription_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.396432Z", "completed_at": "2024-08-06T05:17:40.422195Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.442125Z", "completed_at": "2024-08-06T05:17:40.442137Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04981207847595215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__activity_itemized_2", "compiled": true, "compiled_code": "with balance_transaction_enhanced as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__balance_transactions\"\n\n)\n\nselect \n    balance_transaction_id,\n    balance_transaction_created_at,\n    balance_transaction_reporting_category,\n    balance_transaction_currency as currency,\n    balance_transaction_amount as amount,\n    charge_id,\n    payment_intent_id,\n    refund_id,\n    dispute_id,\n\n    \n    invoice_id,\n    invoice_number,\n    \n\n    \n    subscription_id,\n    \n\n    transfer_id,\n    customer_id,\n    customer_email,\n    customer_name,\n    customer_description,\n    customer_shipping_address_line_1,\n    customer_shipping_address_line_2,\n    customer_shipping_address_city,\n    customer_shipping_address_state,\n    customer_shipping_address_postal_code,\n    customer_shipping_address_country,\n    customer_address_line_1,\n    customer_address_line_2,\n    customer_address_city,\n    customer_address_state,\n    customer_address_postal_code,\n    customer_address_country,\n    charge_shipping_address_line_1 as shipping_address_line_1,\n    charge_shipping_address_line_2 as shipping_address_line_2,\n    charge_shipping_address_city as shipping_address_city,\n    charge_shipping_address_state as shipping_address_state,\n    charge_shipping_address_postal_code as shipping_address_postal_code,\n    charge_shipping_address_country as shipping_address_country,\n    card_address_line_1,\n    card_address_line_2,\n    card_address_city,\n    card_address_state,\n    card_address_postal_code,\n    card_address_country,\n    automatic_payout_id,\n    automatic_payout_effective_at,\n\n    \n    payment_method_type,\n    \n    \n    card_brand,\n    card_funding,\n    card_country,\n    charge_statement_descriptor as statement_descriptor,\n    customer_facing_amount,\n    balance_transaction_description,\n    connected_account_id,\n    connected_account_country,\n    connected_account_direct_charge_id,\n    source_relation\n\nfrom balance_transaction_enhanced", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__activity_itemized_2\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.400354Z", "completed_at": "2024-08-06T05:17:40.442499Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.444794Z", "completed_at": "2024-08-06T05:17:40.444799Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.050219058990478516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__balance_change_from_activity_itemized_3", "compiled": true, "compiled_code": "with balance_transaction_enhanced as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__balance_transactions\"\n\n)\n\nselect \n    balance_transaction_id,\n    balance_transaction_created_at as created,\n    balance_transaction_available_on as available_on,\n    balance_transaction_currency as currency,\n    balance_transaction_amount as gross,\n    balance_transaction_fee as fee,\n    balance_transaction_net as net,\n    balance_transaction_reporting_category as reporting_category,\n    balance_transaction_source_id as source_id,\n    balance_transaction_description as description,\n    customer_facing_amount,\n    customer_facing_currency,\n    automatic_payout_id,\n    automatic_payout_effective_at,\n    customer_id,\n    customer_email,\n    customer_name,\n    customer_description,\n    customer_shipping_address_line_1,\n    customer_shipping_address_line_2,\n    customer_shipping_address_city,\n    customer_shipping_address_state,\n    customer_shipping_address_postal_code,\n    customer_shipping_address_country,\n    customer_address_line_1,\n    customer_address_line_2,\n    customer_address_city,\n    customer_address_state,\n    customer_address_postal_code,\n    customer_address_country,\n    charge_shipping_address_line_1 as shipping_address_line_1,\n    charge_shipping_address_line_2 as shipping_address_line_2,\n    charge_shipping_address_city as shipping_address_city,\n    charge_shipping_address_state as shipping_address_state,\n    charge_shipping_address_postal_code as shipping_address_postal_code,\n    charge_shipping_address_country as shipping_address_country,\n    card_address_line_1,\n    card_address_line_2,\n    card_address_city,\n    card_address_state,\n    card_address_postal_code,\n    card_address_country,\n    charge_id,\n    payment_intent_id,\n    charge_created_at as charge_created,\n\n    \n    invoice_id,\n    invoice_number,\n    \n\n    \n    subscription_id,\n    \n    \n    \n    payment_method_type,\n    \n\n    card_brand,\n    card_funding,\n    card_country,\n    charge_statement_descriptor as statement_descriptor,\n    dispute_reason,\n    connected_account_id,\n    connected_account_country,\n    connected_account_direct_charge_id,\n    source_relation\n\nfrom balance_transaction_enhanced", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__balance_change_from_activity_itemized_3\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.447579Z", "completed_at": "2024-08-06T05:17:40.456007Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.456594Z", "completed_at": "2024-08-06T05:17:40.456600Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011976957321166992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__ending_balance_reconciliation_itemized_4", "compiled": true, "compiled_code": "with balance_transaction_enhanced as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__balance_transactions\"\n    where automatic_payout_id is not null\n\n)\n\nselect\n    automatic_payout_id,\n    payout_arrival_date_at as automatic_payout_effective_at,\n    balance_transaction_id,\n    balance_transaction_created_at as created,\n    balance_transaction_available_on as available_on,\n    balance_transaction_currency as currency,\n    balance_transaction_amount as gross,\n    balance_transaction_fee as fee,\n    balance_transaction_net as net,\n    balance_transaction_reporting_category as reporting_category,\n    balance_transaction_source_id as source_id,\n    balance_transaction_description as description,\n    customer_facing_amount,\n    customer_facing_currency,\n    customer_id,\n    customer_email,\n    customer_name,\n    customer_description,\n    customer_shipping_address_line_1,\n    customer_shipping_address_line_2,\n    customer_shipping_address_city,\n    customer_shipping_address_state,\n    customer_shipping_address_postal_code,\n    customer_shipping_address_country,\n    customer_address_line_1,\n    customer_address_line_2,\n    customer_address_city,\n    customer_address_state,\n    customer_address_postal_code,\n    customer_address_country,\n    charge_shipping_address_line_1 as shipping_address_line_1,\n    charge_shipping_address_line_2 as shipping_address_line_2,\n    charge_shipping_address_city as shipping_address_city,\n    charge_shipping_address_state as shipping_address_state,\n    charge_shipping_address_postal_code as shipping_address_postal_code,\n    charge_shipping_address_country as shipping_address_country,\n    card_address_line_1,\n    card_address_line_2,\n    card_address_city,\n    card_address_state,\n    card_address_postal_code,\n    card_address_country,\n    charge_id,\n    payment_intent_id,\n    charge_created_at as charge_created,\n\n    \n    invoice_id,\n    invoice_number,\n    \n\n    \n    subscription_id,\n    \n    \n    \n    payment_method_type,\n    \n    \n    card_brand,\n    card_funding,\n    card_country,\n    charge_statement_descriptor as statement_descriptor,\n    dispute_reason,\n    connected_account_id, \n    connected_account_country,\n    connected_account_direct_charge_id,\n    source_relation\n\nfrom balance_transaction_enhanced", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__ending_balance_reconciliation_itemized_4\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.451553Z", "completed_at": "2024-08-06T05:17:40.456844Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.458566Z", "completed_at": "2024-08-06T05:17:40.458570Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008970022201538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__payout_itemized_3", "compiled": true, "compiled_code": "with balance_transaction_enhanced as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__balance_transactions\"\n    where payout_id is not null\n\n)\n\nselect\n    payout_id,\n    case \n        when payout_is_automatic = true then payout_arrival_date_at \n        else payout_created_at\n    end as effective_at,\n    payout_currency as currency,\n    balance_transaction_id,\n    balance_transaction_amount as gross,\n    balance_transaction_fee as fee,\n    balance_transaction_net as net,\n    balance_transaction_reporting_category as reporting_category,\n    balance_transaction_description as description,\n    payout_arrival_date_at as payout_expected_arrival_date,\n    payout_status,\n    case \n        when lower(payout_status) in ('canceled','failed') then payout_created_at\n        else null\n    end as payout_reversed_at,\n    payout_type,\n    payout_description,\n    coalesce(destination_bank_account_id, destination_card_id) as payout_destination_id,\n    source_relation\n\nfrom balance_transaction_enhanced", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__payout_itemized_3\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.462223Z", "completed_at": "2024-08-06T05:17:40.471093Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.472000Z", "completed_at": "2024-08-06T05:17:40.472007Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013679742813110352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__balance_transactions_balance_transaction_id__source_relation.e7b1075064", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__balance_transactions\"\n    group by balance_transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.466714Z", "completed_at": "2024-08-06T05:17:40.473010Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.474675Z", "completed_at": "2024-08-06T05:17:40.474682Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009685277938842773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__invoice_line_item_details_invoice_line_item_id__invoice_id__source_relation.c9a57418fb", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_line_item_id, invoice_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__invoice_line_item_details\"\n    group by invoice_line_item_id, invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.475825Z", "completed_at": "2024-08-06T05:17:40.483576Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.484309Z", "completed_at": "2024-08-06T05:17:40.484316Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010907173156738281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__activity_itemized_2_balance_transaction_id__source_relation.bfde3a7d9b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__activity_itemized_2\"\n    group by balance_transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.480554Z", "completed_at": "2024-08-06T05:17:40.484570Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.486024Z", "completed_at": "2024-08-06T05:17:40.486028Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007089853286743164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__balance_change_from_activity_itemized_3_balance_transaction_id__source_relation.042900aa7d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__balance_change_from_activity_itemized_3\"\n    group by balance_transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.487887Z", "completed_at": "2024-08-06T05:17:40.495724Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.496496Z", "completed_at": "2024-08-06T05:17:40.496504Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010838031768798828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__ending_balance_reconciliation_itemized_4_automatic_payout_id__source_relation.a4e66a7386", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        automatic_payout_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__ending_balance_reconciliation_itemized_4\"\n    group by automatic_payout_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.492221Z", "completed_at": "2024-08-06T05:17:40.497591Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.498404Z", "completed_at": "2024-08-06T05:17:40.498409Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007464170455932617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__payout_itemized_3_payout_id__source_relation.db08f37862", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payout_id, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__payout_itemized_3\"\n    group by payout_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.337185Z", "completed_at": "2024-08-06T05:17:40.693386Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.693942Z", "completed_at": "2024-08-06T05:17:40.693951Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3830599784851074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.int_stripe__date_spine", "compiled": true, "compiled_code": "-- depends_on: \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__balance_transactions\"\nwith spine as (\n\n    \n\n    \n\n    \n\n    \n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1290\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2021-01-25' as date) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n\n    cast('2024-08-06' as date) + ((interval '1 day') * (1))\n\n\n\n)\n\nselect * from filtered\n\n\n),\n\naccount as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__account\"\n),\n\ndate_spine as (\n\n    select\n        cast(date_trunc('day', date_day) as date) as date_day, \n        cast(date_trunc('week', date_day) as date) as date_week, \n        cast(date_trunc('month', date_day) as date) as date_month,\n        cast(date_trunc('year', date_day) as date) as date_year,  \n        row_number() over (order by cast(date_trunc('day', date_day) as date)) as date_index\n    from spine\n),\n\nfinal as (\n\n    select distinct\n        account.account_id,\n        account.source_relation,\n        date_spine.date_day,\n        date_spine.date_week,\n        date_spine.date_month,\n        date_spine.date_year,\n        date_spine.date_index\n    from account \n    cross join date_spine\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"int_stripe__date_spine\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.720026Z", "completed_at": "2024-08-06T05:17:40.724703Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.725233Z", "completed_at": "2024-08-06T05:17:40.725238Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00648188591003418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.int_stripe__account_daily", "compiled": true, "compiled_code": "with date_spine as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"int_stripe__date_spine\"\n\n), balance_transaction as (\n\n    select *,\n        case \n            when balance_transaction_type = 'payout' \n            then \n\ndate_trunc('day', \n\n\n    balance_transaction_available_on\n\n\n)  \n            else \n\ndate_trunc('day', \n\n\n    balance_transaction_created_at\n\n\n)\n        end as date\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__balance_transactions\"\n\n), incomplete_charges as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"int_stripe__incomplete_charges\"  \n\n), daily_account_balance_transactions as (\n\n    select\n        date_spine.date_day,\n        date_spine.account_id,\n        date_spine.source_relation,\n        sum(case when balance_transaction.balance_transaction_type in ('charge', 'payment') \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_sales_amount,\n        sum(case when balance_transaction.balance_transaction_type in ('payment_refund', 'refund') \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_refunds_amount,\n        sum(case when balance_transaction.balance_transaction_type = 'adjustment' \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_adjustments_amount,\n        sum(case when balance_transaction.balance_transaction_type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and balance_transaction.balance_transaction_type not like '%transfer%' \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_other_transactions_amount,\n        sum(case when balance_transaction.balance_transaction_type <> 'payout' and balance_transaction.balance_transaction_type not like '%transfer%' \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_gross_transaction_amount,\n        sum(case when balance_transaction.balance_transaction_type <> 'payout' and balance_transaction.balance_transaction_type not like '%transfer%' \n            then balance_transaction_net \n            else 0 end) as total_daily_net_transactions_amount,\n        sum(case when balance_transaction.balance_transaction_type = 'payout' or balance_transaction.balance_transaction_type like '%transfer%' \n            then balance_transaction_fee * -1.0\n            else 0 end) as total_daily_payout_fee_amount,\n        sum(case when balance_transaction.balance_transaction_type = 'payout' or balance_transaction.balance_transaction_type like '%transfer%' \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_gross_payout_amount,\n        sum(case when balance_transaction.balance_transaction_type = 'payout' or balance_transaction.balance_transaction_type like '%transfer%' \n            then balance_transaction_fee * -1.0 \n            else balance_transaction_net end) as daily_net_activity_amount,\n        sum(case when balance_transaction.balance_transaction_type in ('payment', 'charge') \n            then 1 \n            else 0 end) as total_daily_sales_count,\n        sum(case when balance_transaction.balance_transaction_type = 'payout' \n            then 1\n            else 0 end) as total_daily_payouts_count,\n        count(distinct case when balance_transaction.balance_transaction_type = 'adjustment' \n                then coalesce(balance_transaction_source_id, payout_id) \n                else null end) as total_daily_adjustments_count\n    from date_spine\n    left join balance_transaction\n        on cast(date_trunc('day', balance_transaction.date) as date) = date_spine.date_day\n        and balance_transaction.source_relation = date_spine.source_relation\n    group by 1,2,3\n\n), daily_failed_charges as (\n\n    select\n        \n\ndate_trunc('day', \n\n\n    created_at\n\n\n) as date,\n        source_relation,\n        count(*) as total_daily_failed_charge_count,\n        sum(amount) as total_daily_failed_charge_amount\n    from incomplete_charges\n    group by 1,2\n)\n\nselect\n    daily_account_balance_transactions.date_day,\n    daily_account_balance_transactions.account_id,\n    daily_account_balance_transactions.source_relation,\n    coalesce(daily_account_balance_transactions.total_daily_sales_amount/100.0,0) as total_daily_sales_amount,\n    coalesce(daily_account_balance_transactions.total_daily_refunds_amount/100.0,0) as total_daily_refunds_amount,\n    coalesce(daily_account_balance_transactions.total_daily_adjustments_amount/100.0,0) as total_daily_adjustments_amount,\n    coalesce(daily_account_balance_transactions.total_daily_other_transactions_amount/100.0,0) as total_daily_other_transactions_amount,\n    coalesce(daily_account_balance_transactions.total_daily_gross_transaction_amount/100.0,0) as total_daily_gross_transaction_amount,\n    coalesce(daily_account_balance_transactions.total_daily_net_transactions_amount/100.0,0) as total_daily_net_transactions_amount,\n    coalesce(daily_account_balance_transactions.total_daily_payout_fee_amount/100.0,0) as total_daily_payout_fee_amount,\n    coalesce(daily_account_balance_transactions.total_daily_gross_payout_amount/100.0,0) as total_daily_gross_payout_amount,\n    coalesce(daily_account_balance_transactions.daily_net_activity_amount/100.0,0) as daily_net_activity_amount,\n    coalesce((daily_account_balance_transactions.daily_net_activity_amount + daily_account_balance_transactions.total_daily_gross_payout_amount)/100.0, 0) as daily_end_balance_amount,\n    coalesce(daily_account_balance_transactions.total_daily_sales_count, 0) as total_daily_sales_count,\n    coalesce(daily_account_balance_transactions.total_daily_payouts_count, 0) as total_daily_payouts_count,\n    coalesce(daily_account_balance_transactions.total_daily_adjustments_count, 0) as total_daily_adjustments_count,\n    coalesce(daily_failed_charges.total_daily_failed_charge_count, 0) as total_daily_failed_charge_count,\n    coalesce(daily_failed_charges.total_daily_failed_charge_amount/100, 0) as total_daily_failed_charge_amount\n\nfrom daily_account_balance_transactions\nleft join daily_failed_charges\n    on daily_account_balance_transactions.date_day = daily_failed_charges.date\n    and daily_account_balance_transactions.source_relation = daily_failed_charges.source_relation", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"int_stripe__account_daily\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.403309Z", "completed_at": "2024-08-06T05:17:40.706674Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.707455Z", "completed_at": "2024-08-06T05:17:40.707462Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.33324599266052246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__customer_overview", "compiled": true, "compiled_code": "with balance_transaction_joined as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__balance_transactions\"  \n\n), incomplete_charges as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"int_stripe__incomplete_charges\"  \n\n), customer as (\n\n    select *\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stg_stripe__customer\"  \n\n), transactions_grouped as (\n\n    select\n      customer_id,\n      source_relation,\n      sum(\n        case \n          when balance_transaction_type in ('charge', 'payment') \n          then balance_transaction_amount\n          else 0 \n        end) \n      as total_sales,\n      sum(\n        case \n          when balance_transaction_type in ('payment_refund', 'refund') \n          then balance_transaction_amount\n          else 0 \n        end) \n      as total_refunds,    \n      sum(balance_transaction_amount) as total_gross_transaction_amount,\n      sum(balance_transaction_fee) as total_fees,\n      sum(balance_transaction_net) as total_net_transaction_amount,\n      sum(\n        case \n          when balance_transaction_type in ('charge', 'payment') \n          then 1\n          else 0 \n          end) \n      as total_sales_count, \n      sum(\n        case \n          when balance_transaction_type in ('payment_refund', 'refund') \n          then 1\n          else 0 \n        end) \n      as total_refund_count,   \n      sum(\n        case \n          when balance_transaction_type in ('charge', 'payment') and date_trunc('month', \n\ndate_trunc('day', \n\n\n    balance_transaction_created_at\n\n\n)) = date_trunc('month', \n\ndate_trunc('day', \n\n\n    \n    current_timestamp::timestamp\n\n\n\n))\n          then balance_transaction_amount \n          else 0 \n        end) \n      as sales_this_month,\n      sum(\n        case \n          when balance_transaction_type in ('payment_refund', 'refund') and date_trunc('month', \n\ndate_trunc('day', \n\n\n    balance_transaction_created_at\n\n\n)) = date_trunc('month', \n\ndate_trunc('day', \n\n\n    \n    current_timestamp::timestamp\n\n\n\n))\n          then balance_transaction_amount \n          else 0 \n        end) \n      as refunds_this_month,\n      sum(\n        case \n          when date_trunc('month', \n\ndate_trunc('day', \n\n\n    balance_transaction_created_at\n\n\n)) = date_trunc('month', \n\ndate_trunc('day', \n\n\n    \n    current_timestamp::timestamp\n\n\n\n))\n          then balance_transaction_amount \n          else 0 \n        end) \n      as gross_transaction_amount_this_month,\n      sum(\n        case \n          when date_trunc('month', \n\ndate_trunc('day', \n\n\n    balance_transaction_created_at\n\n\n)) = date_trunc('month', \n\ndate_trunc('day', \n\n\n    \n    current_timestamp::timestamp\n\n\n\n))\n          then balance_transaction_fee \n          else 0 \n        end) \n      as fees_this_month,\n      sum(\n        case \n          when date_trunc('month', \n\ndate_trunc('day', \n\n\n    balance_transaction_created_at\n\n\n)) = date_trunc('month', \n\ndate_trunc('day', \n\n\n    \n    current_timestamp::timestamp\n\n\n\n))\n          then balance_transaction_net \n          else 0 \n        end) \n      as net_transaction_amount_this_month,\n      sum(\n        case \n          when balance_transaction_type in ('charge', 'payment') and date_trunc('month', \n\ndate_trunc('day', \n\n\n    balance_transaction_created_at\n\n\n)) = date_trunc('month', \n\ndate_trunc('day', \n\n\n    \n    current_timestamp::timestamp\n\n\n\n))\n          then 1 \n          else 0 \n        end) \n      as sales_count_this_month,\n      sum(\n        case \n          when balance_transaction_type in ('payment_refund', 'refund') and date_trunc('month', \n\ndate_trunc('day', \n\n\n    balance_transaction_created_at\n\n\n)) = date_trunc('month', \n\ndate_trunc('day', \n\n\n    \n    current_timestamp::timestamp\n\n\n\n))\n          then 1 \n          else 0 \n        end) \n      as refund_count_this_month,\n      min(\n        case \n          when balance_transaction_type in ('charge', 'payment') \n          then \n\ndate_trunc('day', \n\n\n    balance_transaction_created_at\n\n\n)\n          else null \n        end) \n      as first_sale_date,\n      max(\n        case \n          when balance_transaction_type in ('charge', 'payment') \n          then \n\ndate_trunc('day', \n\n\n    balance_transaction_created_at\n\n\n)\n          else null \n        end) \n      as most_recent_sale_date\n    from balance_transaction_joined\n    where balance_transaction_type in ('payment', 'charge', 'payment_refund', 'refund')\n    group by 1,2\n\n), failed_charges_by_customer as (\n\n    select\n      customer_id,\n      source_relation,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount,\n      sum(\n        case \n          when date_trunc('month', \n\ndate_trunc('day', \n\n\n    created_at\n\n\n)) = date_trunc('month', \n\ndate_trunc('day', \n\n\n    \n    current_timestamp::timestamp\n\n\n\n))\n          then 1\n          else 0 \n        end) \n      as failed_charge_count_this_month,\n      sum(\n        case \n          when date_trunc('month', \n\ndate_trunc('day', \n\n\n    created_at\n\n\n)) = date_trunc('month', \n\ndate_trunc('day', \n\n\n    \n    current_timestamp::timestamp\n\n\n\n))\n          then amount\n          else 0 \n        end) \n      as failed_charge_amount_this_month\n    from incomplete_charges\n    group by 1,2\n\n), transactions_not_associated_with_customer as (\n\n    select\n      'No Customer ID' as customer_id,\n      'No Associated Customer' as customer_description,\n      customer.created_at as customer_created_at,\n      customer.currency as customer_currency,\n      customer.\"account_balance\",\n  customer.\"customer_address_city\",\n  customer.\"customer_address_country\",\n  customer.\"customer_address_line_1\",\n  customer.\"customer_address_line_2\",\n  customer.\"customer_address_postal_code\",\n  customer.\"customer_address_state\",\n  customer.\"customer_balance\",\n  customer.\"bank_account_id\",\n  customer.\"default_card_id\",\n  customer.\"is_delinquent\",\n  customer.\"email\",\n  customer.\"customer_name\",\n  customer.\"phone\",\n  customer.\"shipping_address_city\",\n  customer.\"shipping_address_country\",\n  customer.\"shipping_address_line_1\",\n  customer.\"shipping_address_line_2\",\n  customer.\"shipping_address_postal_code\",\n  customer.\"shipping_address_state\",\n  customer.\"shipping_name\",\n  customer.\"shipping_phone\",\n  customer.\"is_deleted\",\n      coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,\n      coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,\n      coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transaction_amount,\n      coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,\n      coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_transaction_amount,\n      coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,\n      coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    \n      coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,\n      coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,\n      coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,\n      coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,\n      coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,\n      coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,\n      coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,\n      transactions_grouped.first_sale_date,\n      transactions_grouped.most_recent_sale_date,\n      0 as total_failed_charge_count,\n      0 as total_failed_charge_amount,\n      0 as failed_charge_count_this_month,\n      0 as failed_charge_amount_this_month,\n      transactions_grouped.source_relation\n\n    from transactions_grouped\n    left join customer \n        on transactions_grouped.customer_id = customer.customer_id\n        and transactions_grouped.source_relation = customer.source_relation\n    where customer.customer_id is null and customer.description is null\n\n\n), customer_transactions_overview as (\n\n    select\n      customer.customer_id,\n      customer.description as customer_description,\n      customer.created_at as customer_created_at,\n      customer.currency as customer_currency,\n      customer.\"account_balance\",\n  customer.\"customer_address_city\",\n  customer.\"customer_address_country\",\n  customer.\"customer_address_line_1\",\n  customer.\"customer_address_line_2\",\n  customer.\"customer_address_postal_code\",\n  customer.\"customer_address_state\",\n  customer.\"customer_balance\",\n  customer.\"bank_account_id\",\n  customer.\"default_card_id\",\n  customer.\"is_delinquent\",\n  customer.\"email\",\n  customer.\"customer_name\",\n  customer.\"phone\",\n  customer.\"shipping_address_city\",\n  customer.\"shipping_address_country\",\n  customer.\"shipping_address_line_1\",\n  customer.\"shipping_address_line_2\",\n  customer.\"shipping_address_postal_code\",\n  customer.\"shipping_address_state\",\n  customer.\"shipping_name\",\n  customer.\"shipping_phone\",\n  customer.\"is_deleted\",\n      coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,\n      coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,\n      coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transaction_amount,\n      coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,\n      coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_transaction_amount,\n      coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,\n      coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    \n      coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,\n      coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,\n      coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,\n      coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,\n      coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,\n      coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,\n      coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,\n      transactions_grouped.first_sale_date,\n      transactions_grouped.most_recent_sale_date,\n      coalesce(failed_charges_by_customer.total_failed_charge_count, 0) as total_failed_charge_count,\n      coalesce(failed_charges_by_customer.total_failed_charge_amount/100, 0) as total_failed_charge_amount,\n      coalesce(failed_charges_by_customer.failed_charge_count_this_month, 0) as failed_charge_count_this_month,\n      coalesce(failed_charges_by_customer.failed_charge_amount_this_month/100, 0) as failed_charge_amount_this_month,\n      customer.source_relation\n      \n    from customer\n    left join transactions_grouped\n        on customer.customer_id = transactions_grouped.customer_id\n        and customer.source_relation = transactions_grouped.source_relation\n    left join failed_charges_by_customer \n        on customer.customer_id = failed_charges_by_customer.customer_id\n        and customer.source_relation = failed_charges_by_customer.source_relation\n)\n\nselect *\nfrom transactions_not_associated_with_customer\nunion all \nselect *\nfrom customer_transactions_overview", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__customer_overview\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.727210Z", "completed_at": "2024-08-06T05:17:40.731790Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.733357Z", "completed_at": "2024-08-06T05:17:40.733365Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007575035095214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.int_stripe__account_rolling_totals", "compiled": true, "compiled_code": "\n\n\nwith date_spine as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"int_stripe__date_spine\"\n\n), account_daily_balances_by_type as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"int_stripe__account_daily\"\n\n), account_rolling_totals as (\n\n    select\n        *\n\n        \n        , sum(total_daily_sales_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_sales_amount\n        \n        , sum(total_daily_refunds_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_refunds_amount\n        \n        , sum(total_daily_adjustments_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_adjustments_amount\n        \n        , sum(total_daily_other_transactions_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_other_transactions_amount\n        \n        , sum(total_daily_gross_transaction_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_gross_transaction_amount\n        \n        , sum(total_daily_net_transactions_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_net_transactions_amount\n        \n        , sum(total_daily_payout_fee_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_payout_fee_amount\n        \n        , sum(total_daily_gross_payout_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_gross_payout_amount\n        \n        , sum(daily_net_activity_amount) over (order by date_day rows unbounded preceding) as rolling_daily_net_activity_amount\n        \n        , sum(daily_end_balance_amount) over (order by date_day rows unbounded preceding) as rolling_daily_end_balance_amount\n        \n        , sum(total_daily_sales_count) over (order by date_day rows unbounded preceding) as rolling_total_daily_sales_count\n        \n        , sum(total_daily_payouts_count) over (order by date_day rows unbounded preceding) as rolling_total_daily_payouts_count\n        \n        , sum(total_daily_adjustments_count) over (order by date_day rows unbounded preceding) as rolling_total_daily_adjustments_count\n        \n        , sum(total_daily_failed_charge_count) over (order by date_day rows unbounded preceding) as rolling_total_daily_failed_charge_count\n        \n        , sum(total_daily_failed_charge_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_failed_charge_amount\n        \n\n    from account_daily_balances_by_type\n\n), final as (\n\n    select\n        date_spine.account_id,\n        date_spine.date_day,\n        date_spine.date_week,\n        date_spine.date_month,\n        date_spine.date_year,\n        \n        coalesce(round(account_rolling_totals.total_daily_sales_amount,2),0) as total_daily_sales_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_refunds_amount,2),0) as total_daily_refunds_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_adjustments_amount,2),0) as total_daily_adjustments_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_other_transactions_amount,2),0) as total_daily_other_transactions_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_gross_transaction_amount,2),0) as total_daily_gross_transaction_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_net_transactions_amount,2),0) as total_daily_net_transactions_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_payout_fee_amount,2),0) as total_daily_payout_fee_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_gross_payout_amount,2),0) as total_daily_gross_payout_amount,\n        \n        coalesce(round(account_rolling_totals.daily_net_activity_amount,2),0) as daily_net_activity_amount,\n        \n        coalesce(round(account_rolling_totals.daily_end_balance_amount,2),0) as daily_end_balance_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_sales_count,2),0) as total_daily_sales_count,\n        \n        coalesce(round(account_rolling_totals.total_daily_payouts_count,2),0) as total_daily_payouts_count,\n        \n        coalesce(round(account_rolling_totals.total_daily_adjustments_count,2),0) as total_daily_adjustments_count,\n        \n        coalesce(round(account_rolling_totals.total_daily_failed_charge_count,2),0) as total_daily_failed_charge_count,\n        \n        coalesce(round(account_rolling_totals.total_daily_failed_charge_amount,2),0) as total_daily_failed_charge_amount,\n        \n\n        \n        case when account_rolling_totals.rolling_total_daily_sales_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_sales_amount,2),0)\n            end as rolling_total_daily_sales_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_refunds_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_refunds_amount,2),0)\n            end as rolling_total_daily_refunds_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_adjustments_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_adjustments_amount,2),0)\n            end as rolling_total_daily_adjustments_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_other_transactions_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_other_transactions_amount,2),0)\n            end as rolling_total_daily_other_transactions_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_gross_transaction_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_gross_transaction_amount,2),0)\n            end as rolling_total_daily_gross_transaction_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_net_transactions_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_net_transactions_amount,2),0)\n            end as rolling_total_daily_net_transactions_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_payout_fee_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_payout_fee_amount,2),0)\n            end as rolling_total_daily_payout_fee_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_gross_payout_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_gross_payout_amount,2),0)\n            end as rolling_total_daily_gross_payout_amount,\n        \n        case when account_rolling_totals.rolling_daily_net_activity_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_daily_net_activity_amount,2),0)\n            end as rolling_daily_net_activity_amount,\n        \n        case when account_rolling_totals.rolling_daily_end_balance_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_daily_end_balance_amount,2),0)\n            end as rolling_daily_end_balance_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_sales_count is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_sales_count,2),0)\n            end as rolling_total_daily_sales_count,\n        \n        case when account_rolling_totals.rolling_total_daily_payouts_count is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_payouts_count,2),0)\n            end as rolling_total_daily_payouts_count,\n        \n        case when account_rolling_totals.rolling_total_daily_adjustments_count is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_adjustments_count,2),0)\n            end as rolling_total_daily_adjustments_count,\n        \n        case when account_rolling_totals.rolling_total_daily_failed_charge_count is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_failed_charge_count,2),0)\n            end as rolling_total_daily_failed_charge_count,\n        \n        case when account_rolling_totals.rolling_total_daily_failed_charge_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_failed_charge_amount,2),0)\n            end as rolling_total_daily_failed_charge_amount,\n        \n\n        date_spine.date_index,\n        account_rolling_totals.source_relation\n\n    from date_spine\n    left join account_rolling_totals\n        on account_rolling_totals.date_day = date_spine.date_day\n        and account_rolling_totals.account_id = date_spine.account_id\n        and account_rolling_totals.source_relation = date_spine.source_relation\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"int_stripe__account_rolling_totals\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.735691Z", "completed_at": "2024-08-06T05:17:40.738799Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.739380Z", "completed_at": "2024-08-06T05:17:40.739387Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004808187484741211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.int_stripe__account_partitions", "compiled": true, "compiled_code": "\n\nwith account_rolling_totals as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"int_stripe__account_rolling_totals\"\n),\n\nfinal as (\n\n    select\n        *,\n        \n        sum(case when rolling_total_daily_sales_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_sales_amount_partition,\n        sum(case when rolling_total_daily_refunds_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_refunds_amount_partition,\n        sum(case when rolling_total_daily_adjustments_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_adjustments_amount_partition,\n        sum(case when rolling_total_daily_other_transactions_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_other_transactions_amount_partition,\n        sum(case when rolling_total_daily_gross_transaction_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_gross_transaction_amount_partition,\n        sum(case when rolling_total_daily_net_transactions_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_net_transactions_amount_partition,\n        sum(case when rolling_total_daily_payout_fee_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_payout_fee_amount_partition,\n        sum(case when rolling_total_daily_gross_payout_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_gross_payout_amount_partition,\n        sum(case when rolling_daily_net_activity_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_daily_net_activity_amount_partition,\n        sum(case when rolling_daily_end_balance_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_daily_end_balance_amount_partition,\n        sum(case when rolling_total_daily_sales_count is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_sales_count_partition,\n        sum(case when rolling_total_daily_payouts_count is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_payouts_count_partition,\n        sum(case when rolling_total_daily_adjustments_count is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_adjustments_count_partition,\n        sum(case when rolling_total_daily_failed_charge_count is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_failed_charge_count_partition,\n        sum(case when rolling_total_daily_failed_charge_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_failed_charge_amount_partition                  \n    from account_rolling_totals\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"int_stripe__account_partitions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.741769Z", "completed_at": "2024-08-06T05:17:40.752878Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.753418Z", "completed_at": "2024-08-06T05:17:40.753427Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012945175170898438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__daily_overview", "compiled": true, "compiled_code": "\n\nwith account_partitions as (\n\n    select * \n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"int_stripe__account_partitions\"\n),\n\nfinal as (\n\n    select\n        account_id,\n        md5(cast(coalesce(cast(account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(date_day as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as account_daily_id,\n\n        date_day,        \n        date_week,\n        date_month, \n        date_year,  \n        date_index,\n        source_relation,\n        coalesce(total_daily_sales_amount,0) as total_daily_sales_amount,\n        coalesce(total_daily_refunds_amount,0) as total_daily_refunds_amount,\n        coalesce(total_daily_adjustments_amount,0) as total_daily_adjustments_amount,\n        coalesce(total_daily_other_transactions_amount,0) as total_daily_other_transactions_amount,\n        coalesce(total_daily_gross_transaction_amount,0) as total_daily_gross_transaction_amount,\n        coalesce(total_daily_net_transactions_amount,0) as total_daily_net_transactions_amount,\n        coalesce(total_daily_payout_fee_amount,0) as total_daily_payout_fee_amount,\n        coalesce(total_daily_gross_payout_amount,0) as total_daily_gross_payout_amount,\n        coalesce(daily_net_activity_amount,0) as daily_net_activity_amount,\n        coalesce(daily_end_balance_amount,0) as daily_end_balance_amount,\n        coalesce(total_daily_sales_count,0) as total_daily_sales_count,\n        coalesce(total_daily_payouts_count,0) as total_daily_payouts_count,\n        coalesce(total_daily_adjustments_count,0) as total_daily_adjustments_count,\n        coalesce(total_daily_failed_charge_count,0) as total_daily_failed_charge_count,\n        coalesce(total_daily_failed_charge_amount,0) as total_daily_failed_charge_amount,\n        \n        coalesce(rolling_total_daily_sales_amount,   \n            first_value(rolling_total_daily_sales_amount) over (partition by rolling_total_daily_sales_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_sales_amount,\n        coalesce(rolling_total_daily_refunds_amount,   \n            first_value(rolling_total_daily_refunds_amount) over (partition by rolling_total_daily_refunds_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_refunds_amount,\n        coalesce(rolling_total_daily_adjustments_amount,   \n            first_value(rolling_total_daily_adjustments_amount) over (partition by rolling_total_daily_adjustments_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_adjustments_amount,\n        coalesce(rolling_total_daily_other_transactions_amount,   \n            first_value(rolling_total_daily_other_transactions_amount) over (partition by rolling_total_daily_other_transactions_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_other_transactions_amount,\n        coalesce(rolling_total_daily_gross_transaction_amount,   \n            first_value(rolling_total_daily_gross_transaction_amount) over (partition by rolling_total_daily_gross_transaction_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_gross_transaction_amount,\n        coalesce(rolling_total_daily_net_transactions_amount,   \n            first_value(rolling_total_daily_net_transactions_amount) over (partition by rolling_total_daily_net_transactions_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_net_transactions_amount,\n        coalesce(rolling_total_daily_payout_fee_amount,   \n            first_value(rolling_total_daily_payout_fee_amount) over (partition by rolling_total_daily_payout_fee_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_payout_fee_amount,\n        coalesce(rolling_total_daily_gross_payout_amount,   \n            first_value(rolling_total_daily_gross_payout_amount) over (partition by rolling_total_daily_gross_payout_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_gross_payout_amount,\n        coalesce(rolling_daily_net_activity_amount,   \n            first_value(rolling_daily_net_activity_amount) over (partition by rolling_daily_net_activity_amount_partition order by date_day rows unbounded preceding)) as rolling_daily_net_activity_amount,\n        coalesce(rolling_daily_end_balance_amount,   \n            first_value(rolling_daily_end_balance_amount) over (partition by rolling_daily_end_balance_amount_partition order by date_day rows unbounded preceding)) as rolling_daily_end_balance_amount,\n        coalesce(rolling_total_daily_sales_count,   \n            first_value(rolling_total_daily_sales_count) over (partition by rolling_total_daily_sales_count_partition order by date_day rows unbounded preceding)) as rolling_total_daily_sales_count,\n        coalesce(rolling_total_daily_payouts_count,   \n            first_value(rolling_total_daily_payouts_count) over (partition by rolling_total_daily_payouts_count_partition order by date_day rows unbounded preceding)) as rolling_total_daily_payouts_count,\n        coalesce(rolling_total_daily_adjustments_count,   \n            first_value(rolling_total_daily_adjustments_count) over (partition by rolling_total_daily_adjustments_count_partition order by date_day rows unbounded preceding)) as rolling_total_daily_adjustments_count,\n        coalesce(rolling_total_daily_failed_charge_count,   \n            first_value(rolling_total_daily_failed_charge_count) over (partition by rolling_total_daily_failed_charge_count_partition order by date_day rows unbounded preceding)) as rolling_total_daily_failed_charge_count,\n        coalesce(rolling_total_daily_failed_charge_amount,   \n            first_value(rolling_total_daily_failed_charge_amount) over (partition by rolling_total_daily_failed_charge_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_failed_charge_amount\n\n    from account_partitions\n)    \n\nselect *\nfrom final", "relation_name": "\"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__daily_overview\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-06T05:17:40.755883Z", "completed_at": "2024-08-06T05:17:40.759394Z"}, {"name": "execute", "started_at": "2024-08-06T05:17:40.759912Z", "completed_at": "2024-08-06T05:17:40.759917Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005326032638549805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__daily_overview_account_id__date_day__source_relation.81c846ac71", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, date_day, source_relation\n    from \"postgres\".\"stripe_integrations_tests_14_stripe_dev\".\"stripe__daily_overview\"\n    group by account_id, date_day, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}], "elapsed_time": 3.818812131881714, "args": {"quiet": false, "target": "postgres", "send_anonymous_usage_stats": true, "print": true, "project_dir": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_stripe/integration_tests", "use_colors": true, "log_path": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_stripe/integration_tests/logs", "macro_debugging": false, "printer_width": 80, "show_resource_report": false, "vars": {}, "defer": false, "populate_cache": true, "write_json": true, "favor_state": false, "profiles_dir": "/Users/joseph.markiewicz/.dbt", "log_level_file": "debug", "warn_error_options": {"include": [], "exclude": []}, "empty_catalog": false, "log_file_max_bytes": 10485760, "partial_parse_file_diff": true, "require_explicit_package_overrides_for_builtin_materializations": false, "static": false, "exclude": [], "cache_selected_only": false, "enable_legacy_logger": false, "log_level": "info", "select": [], "compile": true, "log_format": "default", "strict_mode": false, "log_format_file": "debug", "introspect": true, "static_parser": true, "indirect_selection": "eager", "partial_parse": true, "which": "generate", "invocation_command": "dbt docs generate -t postgres", "use_colors_file": true, "version_check": true}}